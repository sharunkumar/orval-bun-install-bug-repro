Only in npm/node_modules: .package-lock.json
Only in bun/node_modules/@apidevtools/swagger-parser/node_modules/ajv: node_modules
Only in npm/node_modules/@apidevtools/swagger-parser/node_modules: ajv-draft-04
Only in npm/node_modules/@apidevtools/swagger-parser/node_modules: json-schema-traverse
Only in bun/node_modules/@babel/traverse: node_modules
Only in npm/node_modules/@eslint/config-array: node_modules
Only in npm/node_modules/@eslint/eslintrc/node_modules: brace-expansion
Only in npm/node_modules/@eslint/eslintrc/node_modules: globals
Only in bun/node_modules/@eslint/eslintrc/node_modules: ignore
Only in npm/node_modules/@eslint/eslintrc/node_modules: minimatch
Only in bun/node_modules/@eslint-community/eslint-utils: node_modules
Only in bun/node_modules/@ibm-cloud/openapi-ruleset/node_modules/minimatch: node_modules
Only in bun/node_modules/@orval/core/node_modules/ajv: node_modules
Only in npm/node_modules/@orval/core/node_modules: json-schema-traverse
Only in bun/node_modules/@stoplight: better-ajv-errors
Only in npm/node_modules/@stoplight/spectral-core/node_modules/@stoplight: better-ajv-errors
Only in bun/node_modules/@stoplight/spectral-core/node_modules/ajv: node_modules
Only in npm/node_modules/@stoplight/spectral-core/node_modules: ajv-errors
Only in npm/node_modules/@stoplight/spectral-core/node_modules: brace-expansion
Only in npm/node_modules/@stoplight/spectral-core/node_modules: json-schema-traverse
Only in npm/node_modules/@stoplight/spectral-core/node_modules: minimatch
Only in npm/node_modules/@stoplight/spectral-functions/node_modules: @stoplight
Only in bun/node_modules/@stoplight/spectral-functions/node_modules/ajv: node_modules
Only in npm/node_modules/@stoplight/spectral-functions/node_modules: ajv-draft-04
Only in npm/node_modules/@stoplight/spectral-functions/node_modules: ajv-errors
Only in npm/node_modules/@stoplight/spectral-functions/node_modules: json-schema-traverse
Only in npm/node_modules/@stoplight/spectral-rulesets/node_modules: @stoplight
Only in npm/node_modules/@typescript-eslint/eslint-plugin: node_modules
Only in bun/node_modules/@typescript-eslint/typescript-estree: node_modules
Only in npm/node_modules/@typescript-eslint/visitor-keys: node_modules
Only in bun/node_modules: ajv-draft-04
Only in bun/node_modules: ajv-errors
Only in bun/node_modules/ajv-formats/node_modules/ajv: node_modules
Only in npm/node_modules/ajv-formats/node_modules: json-schema-traverse
Only in npm/node_modules/brace-expansion: .github
diff -r npm/node_modules/brace-expansion/README.md bun/node_modules/brace-expansion/README.md
107,112d106
< ## Security contact information
< 
< To report a security vulnerability, please use the
< [Tidelift security contact](https://tidelift.com/security).
< Tidelift will coordinate the fix and disclosure.
< 
diff -r npm/node_modules/brace-expansion/index.js bun/node_modules/brace-expansion/index.js
0a1
> var concatMap = require('concat-map');
80a82,85
> function identity(e) {
>   return e;
> }
> 
99c104
<   if (!m) return [str];
---
>   if (!m || /\$$/.test(m.pre)) return [str];
100a106,140
>   var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
>   var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
>   var isSequence = isNumericSequence || isAlphaSequence;
>   var isOptions = m.body.indexOf(',') >= 0;
>   if (!isSequence && !isOptions) {
>     // {a},b}
>     if (m.post.match(/,(?!,).*\}/)) {
>       str = m.pre + '{' + m.body + escClose + m.post;
>       return expand(str);
>     }
>     return [str];
>   }
> 
>   var n;
>   if (isSequence) {
>     n = m.body.split(/\.\./);
>   } else {
>     n = parseCommaParts(m.body);
>     if (n.length === 1) {
>       // x{{a,b}}y ==> x{a}y x{b}y
>       n = expand(n[0], false).map(embrace);
>       if (n.length === 1) {
>         var post = m.post.length
>           ? expand(m.post, false)
>           : [''];
>         return post.map(function(p) {
>           return m.pre + n[0] + p;
>         });
>       }
>     }
>   }
> 
>   // at this point, n is the parts, and we know it's not a comma set
>   // with a single entry.
> 
107,124c147
<   if (/\$$/.test(m.pre)) {    
<     for (var k = 0; k < post.length; k++) {
<       var expansion = pre+ '{' + m.body + '}' + post[k];
<       expansions.push(expansion);
<     }
<   } else {
<     var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
<     var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
<     var isSequence = isNumericSequence || isAlphaSequence;
<     var isOptions = m.body.indexOf(',') >= 0;
<     if (!isSequence && !isOptions) {
<       // {a},b}
<       if (m.post.match(/,.*\}/)) {
<         str = m.pre + '{' + m.body + escClose + m.post;
<         return expand(str);
<       }
<       return [str];
<     }
---
>   var N;
126,139c149,160
<     var n;
<     if (isSequence) {
<       n = m.body.split(/\.\./);
<     } else {
<       n = parseCommaParts(m.body);
<       if (n.length === 1) {
<         // x{{a,b}}y ==> x{a}y x{b}y
<         n = expand(n[0], false).map(embrace);
<         if (n.length === 1) {
<           return post.map(function(p) {
<             return m.pre + n[0] + p;
<           });
<         }
<       }
---
>   if (isSequence) {
>     var x = numeric(n[0]);
>     var y = numeric(n[1]);
>     var width = Math.max(n[0].length, n[1].length)
>     var incr = n.length == 3
>       ? Math.abs(numeric(n[2]))
>       : 1;
>     var test = lte;
>     var reverse = y < x;
>     if (reverse) {
>       incr *= -1;
>       test = gte;
140a162
>     var pad = n.some(isPadded);
142,144c164
<     // at this point, n is the parts, and we know it's not a comma set
<     // with a single entry.
<     var N;
---
>     N = [];
146,179c166,181
<     if (isSequence) {
<       var x = numeric(n[0]);
<       var y = numeric(n[1]);
<       var width = Math.max(n[0].length, n[1].length)
<       var incr = n.length == 3
<         ? Math.abs(numeric(n[2]))
<         : 1;
<       var test = lte;
<       var reverse = y < x;
<       if (reverse) {
<         incr *= -1;
<         test = gte;
<       }
<       var pad = n.some(isPadded);
< 
<       N = [];
< 
<       for (var i = x; test(i, y); i += incr) {
<         var c;
<         if (isAlphaSequence) {
<           c = String.fromCharCode(i);
<           if (c === '\\')
<             c = '';
<         } else {
<           c = String(i);
<           if (pad) {
<             var need = width - c.length;
<             if (need > 0) {
<               var z = new Array(need + 1).join('0');
<               if (i < 0)
<                 c = '-' + z + c.slice(1);
<               else
<                 c = z + c;
<             }
---
>     for (var i = x; test(i, y); i += incr) {
>       var c;
>       if (isAlphaSequence) {
>         c = String.fromCharCode(i);
>         if (c === '\\')
>           c = '';
>       } else {
>         c = String(i);
>         if (pad) {
>           var need = width - c.length;
>           if (need > 0) {
>             var z = new Array(need + 1).join('0');
>             if (i < 0)
>               c = '-' + z + c.slice(1);
>             else
>               c = z + c;
182d183
<         N.push(c);
184,189c185
<     } else {
<       N = [];
< 
<       for (var j = 0; j < n.length; j++) {
<         N.push.apply(N, expand(n[j], false));
<       }
---
>       N.push(c);
190a187,189
>   } else {
>     N = concatMap(n, function(el) { return expand(el, false) });
>   }
192,197c191,195
<     for (var j = 0; j < N.length; j++) {
<       for (var k = 0; k < post.length; k++) {
<         var expansion = pre + N[j] + post[k];
<         if (!isTop || isSequence || expansion)
<           expansions.push(expansion);
<       }
---
>   for (var j = 0; j < N.length; j++) {
>     for (var k = 0; k < post.length; k++) {
>       var expansion = pre + N[j] + post[k];
>       if (!isTop || isSequence || expansion)
>         expansions.push(expansion);
diff -r npm/node_modules/brace-expansion/package.json bun/node_modules/brace-expansion/package.json
4c4
<   "version": "2.0.1",
---
>   "version": "1.1.12",
17c17,18
<     "balanced-match": "^1.0.0"
---
>     "balanced-match": "^1.0.0",
>     "concat-map": "0.0.1"
20c21
<     "@c4312/matcha": "^1.3.1",
---
>     "matcha": "^0.7.0",
44a46,48
>   },
>   "publishConfig": {
>     "tag": "1.x"
Only in npm/node_modules/eslint/node_modules: brace-expansion
Only in npm/node_modules/eslint/node_modules: eslint-visitor-keys
Only in bun/node_modules/eslint/node_modules: ignore
Only in npm/node_modules/eslint/node_modules: minimatch
diff -r npm/node_modules/eslint-visitor-keys/README.md bun/node_modules/eslint-visitor-keys/README.md
5c5
< [![Build Status](https://github.com/eslint/eslint-visitor-keys/workflows/CI/badge.svg)](https://github.com/eslint/eslint-visitor-keys/actions)
---
> [![Build Status](https://github.com/eslint/js/workflows/CI/badge.svg)](https://github.com/eslint/js/actions)
19c19
< - [Node.js] `^12.22.0`, `^14.17.0`, or `>=16.0.0`
---
> - [Node.js] `^18.18.0`, `^20.9.0`, or `>=21.1.0`
21d20
< 
90c89
< See [GitHub releases](https://github.com/eslint/eslint-visitor-keys/releases).
---
> See [GitHub releases](https://github.com/eslint/js/releases).
102d100
< 
105a104,121
> 
> <!-- NOTE: This section is autogenerated. Do not manually edit.-->
> <!--sponsorsstart-->
> ## Sponsors
> 
> The following companies, organizations, and individuals support ESLint's ongoing maintenance and development. [Become a Sponsor](https://eslint.org/donate)
> to get your logo on our READMEs and [website](https://eslint.org/sponsors).
> 
> <h3>Diamond Sponsors</h3>
> <p><a href="https://www.ag-grid.com/"><img src="https://images.opencollective.com/ag-grid/bec0580/logo.png" alt="AG Grid" height="128"></a></p><h3>Platinum Sponsors</h3>
> <p><a href="https://automattic.com"><img src="https://images.opencollective.com/automattic/d0ef3e1/logo.png" alt="Automattic" height="128"></a> <a href="https://www.airbnb.com/"><img src="https://images.opencollective.com/airbnb/d327d66/logo.png" alt="Airbnb" height="128"></a></p><h3>Gold Sponsors</h3>
> <p><a href="https://qlty.sh/"><img src="https://images.opencollective.com/qltysh/33d157d/logo.png" alt="Qlty Software" height="96"></a> <a href="https://trunk.io/"><img src="https://images.opencollective.com/trunkio/fb92d60/avatar.png" alt="trunk.io" height="96"></a> <a href="https://shopify.engineering/"><img src="https://avatars.githubusercontent.com/u/8085" alt="Shopify" height="96"></a></p><h3>Silver Sponsors</h3>
> <p><a href="https://vite.dev/"><img src="https://images.opencollective.com/vite/e6d15e1/logo.png" alt="Vite" height="64"></a> <a href="https://liftoff.io/"><img src="https://images.opencollective.com/liftoff/5c4fa84/logo.png" alt="Liftoff" height="64"></a> <a href="https://americanexpress.io"><img src="https://avatars.githubusercontent.com/u/3853301" alt="American Express" height="64"></a> <a href="https://stackblitz.com"><img src="https://avatars.githubusercontent.com/u/28635252" alt="StackBlitz" height="64"></a></p><h3>Bronze Sponsors</h3>
> <p><a href="https://sentry.io"><img src="https://github.com/getsentry.png" alt="Sentry" height="32"></a> <a href="https://syntax.fm"><img src="https://github.com/syntaxfm.png" alt="Syntax" height="32"></a> <a href="https://cybozu.co.jp/"><img src="https://images.opencollective.com/cybozu/933e46d/logo.png" alt="Cybozu" height="32"></a> <a href="https://www.crosswordsolver.org/anagram-solver/"><img src="https://images.opencollective.com/anagram-solver/2666271/logo.png" alt="Anagram Solver" height="32"></a> <a href="https://icons8.com/"><img src="https://images.opencollective.com/icons8/7fa1641/logo.png" alt="Icons8" height="32"></a> <a href="https://discord.com"><img src="https://images.opencollective.com/discordapp/f9645d9/logo.png" alt="Discord" height="32"></a> <a href="https://www.gitbook.com"><img src="https://avatars.githubusercontent.com/u/7111340" alt="GitBook" height="32"></a> <a href="https://nolebase.ayaka.io"><img src="https://avatars.githubusercontent.com/u/11081491" alt="Neko" height="32"></a> <a href="https://nx.dev"><img src="https://avatars.githubusercontent.com/u/23692104" alt="Nx" height="32"></a> <a href="https://opensource.mercedes-benz.com/"><img src="https://avatars.githubusercontent.com/u/34240465" alt="Mercedes-Benz Group" height="32"></a> <a href="https://herocoders.com"><img src="https://avatars.githubusercontent.com/u/37549774" alt="HeroCoders" height="32"></a> <a href="https://www.lambdatest.com"><img src="https://avatars.githubusercontent.com/u/171592363" alt="LambdaTest" height="32"></a></p>
> <h3>Technology Sponsors</h3>
> Technology sponsors allow us to use their products and services for free as part of a contribution to the open source ecosystem and our work.
> <p><a href="https://netlify.com"><img src="https://raw.githubusercontent.com/eslint/eslint.org/main/src/assets/images/techsponsors/netlify-icon.svg" alt="Netlify" height="32"></a> <a href="https://algolia.com"><img src="https://raw.githubusercontent.com/eslint/eslint.org/main/src/assets/images/techsponsors/algolia-icon.svg" alt="Algolia" height="32"></a> <a href="https://1password.com"><img src="https://raw.githubusercontent.com/eslint/eslint.org/main/src/assets/images/techsponsors/1password-icon.svg" alt="1Password" height="32"></a></p>
> <!--sponsorsend-->
diff -r npm/node_modules/eslint-visitor-keys/dist/eslint-visitor-keys.cjs bun/node_modules/eslint-visitor-keys/dist/eslint-visitor-keys.cjs
3,4c3,5
< Object.defineProperty(exports, '__esModule', { value: true });
< 
---
> /* eslint-disable jsdoc/valid-types -- doesn't allow `readonly`.
>    TODO: remove eslint-disable when https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues/164 is fixed
> */
7a9
> /* eslint-enable jsdoc/valid-types -- doesn't allow `readonly string[]`. TODO: check why */
90c92,93
<         "source"
---
>         "source",
>         "attributes"
98c101,102
<         "source"
---
>         "source",
>         "attributes"
101,102c105,106
<         "exported",
<         "local"
---
>         "local",
>         "exported"
138a143,146
>     ImportAttribute: [
>         "key",
>         "value"
>     ],
141c149,150
<         "source"
---
>         "source",
>         "attributes"
147c156,157
<         "source"
---
>         "source",
>         "options"
343a354,357
> 
> /* eslint-disable jsdoc/valid-types -- doesn't allow `readonly`.
>    TODO: remove eslint-disable when https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues/164 is fixed
> */
346c360
<  * @param {object} node The AST node to get keys.
---
>  * @param {Object} node The AST node to get keys.
351a366
> /* eslint-enable jsdoc/valid-types -- doesn't allow `readonly` */
353,354d367
< // Disable valid-jsdoc rule because it reports syntax error on the type of @returns.
< // eslint-disable-next-line valid-jsdoc
361,363c374,375
<     const retv = /** @type {{
<         [type: string]: ReadonlyArray<string>
<     }} */ (Object.assign({}, KEYS));
---
>     const retv = /** @type {{ [type: string]: ReadonlyArray<string> }} */
>         (Object.assign({}, KEYS));
366c378
<         if (Object.prototype.hasOwnProperty.call(retv, type)) {
---
>         if (Object.hasOwn(retv, type)) {
diff -r npm/node_modules/eslint-visitor-keys/dist/eslint-visitor-keys.d.cts bun/node_modules/eslint-visitor-keys/dist/eslint-visitor-keys.d.cts
2c2
<     readonly [type: string]: readonly string[];
---
>     readonly [type: string]: ReadonlyArray<string>;
14c14
<  * @param {object} node The AST node to get keys.
---
>  * @param {Object} node The AST node to get keys.
17c17
< declare function getKeys(node: object): readonly string[];
---
> declare function getKeys(node: Object): readonly string[];
27c27,28
< export { KEYS, VisitorKeys, getKeys, unionWith };
---
> export { KEYS, getKeys, unionWith };
> export type { VisitorKeys };
diff -r npm/node_modules/eslint-visitor-keys/dist/index.d.ts bun/node_modules/eslint-visitor-keys/dist/index.d.ts
3c3
<  * @param {object} node The AST node to get keys.
---
>  * @param {Object} node The AST node to get keys.
6c6
< export function getKeys(node: object): readonly string[];
---
> export function getKeys(node: Object): readonly string[];
14c14
< export type VisitorKeys = import('./visitor-keys.js').VisitorKeys;
---
> export type VisitorKeys = import("./visitor-keys.js").VisitorKeys;
diff -r npm/node_modules/eslint-visitor-keys/dist/visitor-keys.d.ts bun/node_modules/eslint-visitor-keys/dist/visitor-keys.d.ts
3c3
<     readonly [type: string]: readonly string[];
---
>     readonly [type: string]: ReadonlyArray<string>;
diff -r npm/node_modules/eslint-visitor-keys/lib/index.js bun/node_modules/eslint-visitor-keys/lib/index.js
26a27,30
> 
> /* eslint-disable jsdoc/valid-types -- doesn't allow `readonly`.
>    TODO: remove eslint-disable when https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues/164 is fixed
> */
29c33
<  * @param {object} node The AST node to get keys.
---
>  * @param {Object} node The AST node to get keys.
34a39
> /* eslint-enable jsdoc/valid-types -- doesn't allow `readonly` */
36,37d40
< // Disable valid-jsdoc rule because it reports syntax error on the type of @returns.
< // eslint-disable-next-line valid-jsdoc
44,46c47,48
<     const retv = /** @type {{
<         [type: string]: ReadonlyArray<string>
<     }} */ (Object.assign({}, KEYS));
---
>     const retv = /** @type {{ [type: string]: ReadonlyArray<string> }} */
>         (Object.assign({}, KEYS));
49c51
<         if (Object.prototype.hasOwnProperty.call(retv, type)) {
---
>         if (Object.hasOwn(retv, type)) {
diff -r npm/node_modules/eslint-visitor-keys/lib/visitor-keys.js bun/node_modules/eslint-visitor-keys/lib/visitor-keys.js
0a1,3
> /* eslint-disable jsdoc/valid-types -- doesn't allow `readonly`.
>    TODO: remove eslint-disable when https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues/164 is fixed
> */
3a7
> /* eslint-enable jsdoc/valid-types -- doesn't allow `readonly string[]`. TODO: check why */
86c90,91
<         "source"
---
>         "source",
>         "attributes"
94c99,100
<         "source"
---
>         "source",
>         "attributes"
97,98c103,104
<         "exported",
<         "local"
---
>         "local",
>         "exported"
134a141,144
>     ImportAttribute: [
>         "key",
>         "value"
>     ],
137c147,148
<         "source"
---
>         "source",
>         "attributes"
143c154,155
<         "source"
---
>         "source",
>         "options"
diff -r npm/node_modules/eslint-visitor-keys/package.json bun/node_modules/eslint-visitor-keys/package.json
3c3
<   "version": "3.4.3",
---
>   "version": "4.2.1",
26c26
<     "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
---
>     "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
31,37c31
<     "@typescript-eslint/parser": "^5.14.0",
<     "c8": "^7.11.0",
<     "chai": "^4.3.6",
<     "eslint": "^7.29.0",
<     "eslint-config-eslint": "^7.0.0",
<     "eslint-plugin-jsdoc": "^35.4.0",
<     "eslint-plugin-node": "^11.1.0",
---
>     "@typescript-eslint/parser": "^8.7.0",
41d34
<     "mocha": "^9.2.1",
43,46c36,39
<     "rollup": "^2.70.0",
<     "rollup-plugin-dts": "^4.2.3",
<     "tsd": "^0.19.1",
<     "typescript": "^4.6.2"
---
>     "rollup": "^4.22.4",
>     "rollup-plugin-dts": "^6.1.1",
>     "tsd": "^0.31.2",
>     "typescript": "^5.6.2"
52,55c45
<     "build:keys": "node tools/build-keys-from-ts",
<     "build:types": "tsc",
<     "lint": "eslint .",
<     "prepare": "npm run build",
---
>     "build:types": "tsc -v && tsc",
65c55,59
<   "repository": "eslint/eslint-visitor-keys",
---
>   "repository": {
>     "type": "git",
>     "url": "https://github.com/eslint/js.git",
>     "directory": "packages/eslint-visitor-keys"
>   },
67c61,63
<   "keywords": [],
---
>   "keywords": [
>     "eslint"
>   ],
71c67
<     "url": "https://github.com/eslint/eslint-visitor-keys/issues"
---
>     "url": "https://github.com/eslint/js/issues"
73c69
<   "homepage": "https://github.com/eslint/eslint-visitor-keys#readme"
---
>   "homepage": "https://github.com/eslint/js/blob/main/packages/eslint-visitor-keys/README.md"
Only in npm/node_modules/espree: node_modules
Only in bun/node_modules: fdir
diff -r npm/node_modules/globals/globals.json bun/node_modules/globals/globals.json
2a3
> 		"AggregateError": false,
20a22
> 		"FinalizationRegistry": false,
64a67
> 		"WeakRef": false,
226a230,362
> 	"es2020": {
> 		"Array": false,
> 		"ArrayBuffer": false,
> 		"Atomics": false,
> 		"BigInt": false,
> 		"BigInt64Array": false,
> 		"BigUint64Array": false,
> 		"Boolean": false,
> 		"constructor": false,
> 		"DataView": false,
> 		"Date": false,
> 		"decodeURI": false,
> 		"decodeURIComponent": false,
> 		"encodeURI": false,
> 		"encodeURIComponent": false,
> 		"Error": false,
> 		"escape": false,
> 		"eval": false,
> 		"EvalError": false,
> 		"Float32Array": false,
> 		"Float64Array": false,
> 		"Function": false,
> 		"globalThis": false,
> 		"hasOwnProperty": false,
> 		"Infinity": false,
> 		"Int16Array": false,
> 		"Int32Array": false,
> 		"Int8Array": false,
> 		"isFinite": false,
> 		"isNaN": false,
> 		"isPrototypeOf": false,
> 		"JSON": false,
> 		"Map": false,
> 		"Math": false,
> 		"NaN": false,
> 		"Number": false,
> 		"Object": false,
> 		"parseFloat": false,
> 		"parseInt": false,
> 		"Promise": false,
> 		"propertyIsEnumerable": false,
> 		"Proxy": false,
> 		"RangeError": false,
> 		"ReferenceError": false,
> 		"Reflect": false,
> 		"RegExp": false,
> 		"Set": false,
> 		"SharedArrayBuffer": false,
> 		"String": false,
> 		"Symbol": false,
> 		"SyntaxError": false,
> 		"toLocaleString": false,
> 		"toString": false,
> 		"TypeError": false,
> 		"Uint16Array": false,
> 		"Uint32Array": false,
> 		"Uint8Array": false,
> 		"Uint8ClampedArray": false,
> 		"undefined": false,
> 		"unescape": false,
> 		"URIError": false,
> 		"valueOf": false,
> 		"WeakMap": false,
> 		"WeakSet": false
> 	},
> 	"es2021": {
> 		"AggregateError": false,
> 		"Array": false,
> 		"ArrayBuffer": false,
> 		"Atomics": false,
> 		"BigInt": false,
> 		"BigInt64Array": false,
> 		"BigUint64Array": false,
> 		"Boolean": false,
> 		"constructor": false,
> 		"DataView": false,
> 		"Date": false,
> 		"decodeURI": false,
> 		"decodeURIComponent": false,
> 		"encodeURI": false,
> 		"encodeURIComponent": false,
> 		"Error": false,
> 		"escape": false,
> 		"eval": false,
> 		"EvalError": false,
> 		"FinalizationRegistry": false,
> 		"Float32Array": false,
> 		"Float64Array": false,
> 		"Function": false,
> 		"globalThis": false,
> 		"hasOwnProperty": false,
> 		"Infinity": false,
> 		"Int16Array": false,
> 		"Int32Array": false,
> 		"Int8Array": false,
> 		"isFinite": false,
> 		"isNaN": false,
> 		"isPrototypeOf": false,
> 		"JSON": false,
> 		"Map": false,
> 		"Math": false,
> 		"NaN": false,
> 		"Number": false,
> 		"Object": false,
> 		"parseFloat": false,
> 		"parseInt": false,
> 		"Promise": false,
> 		"propertyIsEnumerable": false,
> 		"Proxy": false,
> 		"RangeError": false,
> 		"ReferenceError": false,
> 		"Reflect": false,
> 		"RegExp": false,
> 		"Set": false,
> 		"SharedArrayBuffer": false,
> 		"String": false,
> 		"Symbol": false,
> 		"SyntaxError": false,
> 		"toLocaleString": false,
> 		"toString": false,
> 		"TypeError": false,
> 		"Uint16Array": false,
> 		"Uint32Array": false,
> 		"Uint8Array": false,
> 		"Uint8ClampedArray": false,
> 		"undefined": false,
> 		"unescape": false,
> 		"URIError": false,
> 		"valueOf": false,
> 		"WeakMap": false,
> 		"WeakRef": false,
> 		"WeakSet": false
> 	},
255c391
< 		"AudioWorkletGlobalScope ": false,
---
> 		"AudioWorkletGlobalScope": false,
285a422
> 		"ClipboardItem": false,
290a428
> 		"CompressionStream": false,
308a447
> 		"CSSMatrixComponent": false,
311a451,452
> 		"CSSPerspective": false,
> 		"CSSRotate": false,
313a455,458
> 		"CSSScale": false,
> 		"CSSSkew": false,
> 		"CSSSkewX": false,
> 		"CSSSkewY": false,
317a463,464
> 		"CSSTransformValue": false,
> 		"CSSTranslate": false,
323a471
> 		"DecompressionStream": false,
344a493
> 		"DOMRectList": false,
367a517
> 		"FormDataEvent": false,
502a653
> 		"MediaMetadata": false,
510a662
> 		"MediaStreamConstraints": false,
538a691
> 		"NavigatorUAData": false,
548a702
> 		"OffscreenCanvasRenderingContext2D": false,
652a807
> 		"OverconstrainedError": false,
704a860
> 		"ReadableByteStreamController": false,
705a862,865
> 		"ReadableStreamBYOBReader": false,
> 		"ReadableStreamBYOBRequest": false,
> 		"ReadableStreamDefaultController": false,
> 		"ReadableStreamDefaultReader": false,
708a869
> 		"reportError": false,
770a932
> 		"structuredClone": false,
773a936
> 		"SubmitEvent": false,
875a1039
> 		"TextDecoderStream": false,
876a1041
> 		"TextEncoderStream": false,
883a1049
> 		"ToggleEvent": false,
889a1056,1057
> 		"TransformStream": false,
> 		"TransformStreamDefaultController": false,
923a1092,1093
> 		"WritableStreamDefaultController": false,
> 		"WritableStreamDefaultWriter": false,
931a1102,1125
> 		"XRAnchor": false,
> 		"XRBoundedReferenceSpace": false,
> 		"XRCPUDepthInformation": false,
> 		"XRDepthInformation": false,
> 		"XRFrame": false,
> 		"XRInputSource": false,
> 		"XRInputSourceArray": false,
> 		"XRInputSourceEvent": false,
> 		"XRInputSourcesChangeEvent": false,
> 		"XRPose": false,
> 		"XRReferenceSpace": false,
> 		"XRReferenceSpaceEvent": false,
> 		"XRRenderState": false,
> 		"XRRigidTransform": false,
> 		"XRSession": false,
> 		"XRSessionEvent": false,
> 		"XRSpace": false,
> 		"XRSystem": false,
> 		"XRView": false,
> 		"XRViewerPose": false,
> 		"XRViewport": false,
> 		"XRWebGLBinding": false,
> 		"XRWebGLDepthInformation": false,
> 		"XRWebGLLayer": false,
940a1135
> 		"ByteLengthQueuingStrategy": false,
945a1141
> 		"CompressionStream": false,
946a1143,1150
> 		"CountQueuingStrategy": false,
> 		"crypto": false,
> 		"Crypto": false,
> 		"CryptoKey": false,
> 		"CustomEvent": false,
> 		"DecompressionStream": false,
> 		"ErrorEvent": false,
> 		"Event": false,
947a1152
> 		"File": false,
966a1172
> 		"MessageEvent": false,
985a1192,1193
> 		"PerformanceObserver": false,
> 		"PerformanceObserverEntryList": false,
990a1199,1204
> 		"ReadableByteStreamController": false,
> 		"ReadableStream": false,
> 		"ReadableStreamBYOBReader": false,
> 		"ReadableStreamBYOBRequest": false,
> 		"ReadableStreamDefaultController": false,
> 		"ReadableStreamDefaultReader": false,
991a1206
> 		"reportError": false,
997a1213
> 		"SubtleCrypto": false,
998a1215
> 		"TextDecoderStream": false,
999a1217,1219
> 		"TextEncoderStream": false,
> 		"TransformStream": false,
> 		"TransformStreamDefaultController": false,
1001a1222
> 		"WebAssembly": false,
1004a1226,1228
> 		"WritableStream": false,
> 		"WritableStreamDefaultController": false,
> 		"WritableStreamDefaultWriter": false,
1009a1234,1239
> 		"AbortController": false,
> 		"AbortSignal": false,
> 		"atob": false,
> 		"Blob": false,
> 		"BroadcastChannel": false,
> 		"btoa": false,
1010a1241
> 		"ByteLengthQueuingStrategy": false,
1013a1245
> 		"CompressionStream": false,
1014a1247,1255
> 		"CountQueuingStrategy": false,
> 		"crypto": false,
> 		"Crypto": false,
> 		"CryptoKey": false,
> 		"CustomEvent": false,
> 		"DecompressionStream": false,
> 		"DOMException": false,
> 		"Event": false,
> 		"EventTarget": false,
1015a1257,1259
> 		"fetch": false,
> 		"File": false,
> 		"FormData": false,
1016a1261
> 		"Headers": false,
1017a1263,1265
> 		"MessageChannel": false,
> 		"MessageEvent": false,
> 		"MessagePort": false,
1018a1267,1273
> 		"performance": false,
> 		"PerformanceEntry": false,
> 		"PerformanceMark": false,
> 		"PerformanceMeasure": false,
> 		"PerformanceObserver": false,
> 		"PerformanceObserverEntryList": false,
> 		"PerformanceResourceTiming": false,
1020a1276,1282
> 		"ReadableByteStreamController": false,
> 		"ReadableStream": false,
> 		"ReadableStreamBYOBReader": false,
> 		"ReadableStreamBYOBRequest": false,
> 		"ReadableStreamDefaultController": false,
> 		"ReadableStreamDefaultReader": false,
> 		"Request": false,
1021a1284
> 		"Response": false,
1024a1288,1289
> 		"structuredClone": false,
> 		"SubtleCrypto": false,
1025a1291
> 		"TextDecoderStream": false,
1026a1293,1295
> 		"TextEncoderStream": false,
> 		"TransformStream": false,
> 		"TransformStreamDefaultController": false,
1028c1297,1301
< 		"URLSearchParams": false
---
> 		"URLSearchParams": false,
> 		"WebAssembly": false,
> 		"WritableStream": false,
> 		"WritableStreamDefaultController": false,
> 		"WritableStreamDefaultWriter": false
1029a1303,1369
> 	"nodeBuiltin": {
> 		"AbortController": false,
> 		"AbortSignal": false,
> 		"atob": false,
> 		"Blob": false,
> 		"BroadcastChannel": false,
> 		"btoa": false,
> 		"Buffer": false,
> 		"ByteLengthQueuingStrategy": false,
> 		"clearImmediate": false,
> 		"clearInterval": false,
> 		"clearTimeout": false,
> 		"CompressionStream": false,
> 		"console": false,
> 		"CountQueuingStrategy": false,
> 		"crypto": false,
> 		"Crypto": false,
> 		"CryptoKey": false,
> 		"CustomEvent": false,
> 		"DecompressionStream": false,
> 		"DOMException": false,
> 		"Event": false,
> 		"EventTarget": false,
> 		"fetch": false,
> 		"File": false,
> 		"FormData": false,
> 		"global": false,
> 		"Headers": false,
> 		"Intl": false,
> 		"MessageChannel": false,
> 		"MessageEvent": false,
> 		"MessagePort": false,
> 		"performance": false,
> 		"PerformanceEntry": false,
> 		"PerformanceMark": false,
> 		"PerformanceMeasure": false,
> 		"PerformanceObserver": false,
> 		"PerformanceObserverEntryList": false,
> 		"PerformanceResourceTiming": false,
> 		"process": false,
> 		"queueMicrotask": false,
> 		"ReadableByteStreamController": false,
> 		"ReadableStream": false,
> 		"ReadableStreamBYOBReader": false,
> 		"ReadableStreamBYOBRequest": false,
> 		"ReadableStreamDefaultController": false,
> 		"ReadableStreamDefaultReader": false,
> 		"Request": false,
> 		"Response": false,
> 		"setImmediate": false,
> 		"setInterval": false,
> 		"setTimeout": false,
> 		"structuredClone": false,
> 		"SubtleCrypto": false,
> 		"TextDecoder": false,
> 		"TextDecoderStream": false,
> 		"TextEncoder": false,
> 		"TextEncoderStream": false,
> 		"TransformStream": false,
> 		"TransformStreamDefaultController": false,
> 		"URL": false,
> 		"URLSearchParams": false,
> 		"WebAssembly": false,
> 		"WritableStream": false,
> 		"WritableStreamDefaultController": false,
> 		"WritableStreamDefaultWriter": false
> 	},
1068a1409
> 		"expectAsync": false,
1076a1418
> 		"spyOnAllFunctions": false,
1186,1196c1528,1540
< 		"ActiveXObject": true,
< 		"Enumerator": true,
< 		"GetObject": true,
< 		"ScriptEngine": true,
< 		"ScriptEngineBuildVersion": true,
< 		"ScriptEngineMajorVersion": true,
< 		"ScriptEngineMinorVersion": true,
< 		"VBArray": true,
< 		"WScript": true,
< 		"WSH": true,
< 		"XDomainRequest": true
---
> 		"ActiveXObject": false,
> 		"CollectGarbage": false,
> 		"Debug": false,
> 		"Enumerator": false,
> 		"GetObject": false,
> 		"RuntimeObject": false,
> 		"ScriptEngine": false,
> 		"ScriptEngineBuildVersion": false,
> 		"ScriptEngineMajorVersion": false,
> 		"ScriptEngineMinorVersion": false,
> 		"VBArray": false,
> 		"WScript": false,
> 		"WSH": false
1279d1622
< 		"_": false,
1374a1718
> 		"ByteLengthQueuingStrategy": false,
1383a1728
> 		"CompressionStream": false,
1384a1730,1737
> 		"CountQueuingStrategy": false,
> 		"crypto": false,
> 		"Crypto": false,
> 		"CryptoKey": false,
> 		"CustomEvent": false,
> 		"DecompressionStream": false,
> 		"ErrorEvent": false,
> 		"Event": false,
1388a1742
> 		"File": false,
1407a1762
> 		"MessageEvent": false,
1434a1790,1791
> 		"PerformanceObserver": false,
> 		"PerformanceObserverEntryList": false,
1439a1797,1802
> 		"ReadableByteStreamController": false,
> 		"ReadableStream": false,
> 		"ReadableStreamBYOBReader": false,
> 		"ReadableStreamBYOBRequest": false,
> 		"ReadableStreamDefaultController": false,
> 		"ReadableStreamDefaultReader": false,
1452a1816
> 		"SubtleCrypto": false,
1453a1818
> 		"TextDecoderStream": false,
1454a1820,1822
> 		"TextEncoderStream": false,
> 		"TransformStream": false,
> 		"TransformStreamDefaultController": false,
1456a1825
> 		"WebAssembly": false,
1460a1830,1832
> 		"WritableStream": false,
> 		"WritableStreamDefaultController": false,
> 		"WritableStreamDefaultWriter": false,
1464a1837
> 		"atom": false,
1499a1873,1879
> 		"AbortController": false,
> 		"AbortSignal": false,
> 		"atob": false,
> 		"Blob": false,
> 		"BroadcastChannel": false,
> 		"btoa": false,
> 		"ByteLengthQueuingStrategy": false,
1501a1882
> 		"CompressionStream": false,
1502a1884,1916
> 		"CountQueuingStrategy": false,
> 		"crypto": false,
> 		"Crypto": false,
> 		"CryptoKey": false,
> 		"CustomEvent": false,
> 		"DecompressionStream": false,
> 		"DOMException": false,
> 		"Event": false,
> 		"EventTarget": false,
> 		"fetch": false,
> 		"File": false,
> 		"FormData": false,
> 		"Headers": false,
> 		"Intl": false,
> 		"MessageChannel": false,
> 		"MessageEvent": false,
> 		"MessagePort": false,
> 		"performance": false,
> 		"PerformanceEntry": false,
> 		"PerformanceMark": false,
> 		"PerformanceMeasure": false,
> 		"PerformanceObserver": false,
> 		"PerformanceObserverEntryList": false,
> 		"PerformanceResourceTiming": false,
> 		"queueMicrotask": false,
> 		"ReadableByteStreamController": false,
> 		"ReadableStream": false,
> 		"ReadableStreamBYOBReader": false,
> 		"ReadableStreamBYOBRequest": false,
> 		"ReadableStreamDefaultController": false,
> 		"ReadableStreamDefaultReader": false,
> 		"Request": false,
> 		"Response": false,
1504a1919,1926
> 		"structuredClone": false,
> 		"SubtleCrypto": false,
> 		"TextDecoder": false,
> 		"TextDecoderStream": false,
> 		"TextEncoder": false,
> 		"TextEncoderStream": false,
> 		"TransformStream": false,
> 		"TransformStreamDefaultController": false,
1506c1928,1932
< 		"URLSearchParams": false
---
> 		"URLSearchParams": false,
> 		"WebAssembly": false,
> 		"WritableStream": false,
> 		"WritableStreamDefaultController": false,
> 		"WritableStreamDefaultWriter": false
1517a1944
> 		"GM_addElement": false,
1518a1946
> 		"GM_addValueChangeListener": false,
1519a1948
> 		"GM_download": false,
1521a1951,1952
> 		"GM_getTab": false,
> 		"GM_getTabs": false,
1525a1957
> 		"GM_notification": false,
1527a1960,1961
> 		"GM_removeValueChangeListener": false,
> 		"GM_saveTab": false,
1529a1964
> 		"GM_unregisterMenuCommand": false,
Only in bun/node_modules/globals: index.d.ts
diff -r npm/node_modules/globals/license bun/node_modules/globals/license
3c3
< Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)
---
> Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)
diff -r npm/node_modules/globals/package.json bun/node_modules/globals/package.json
3c3
< 	"version": "11.12.0",
---
> 	"version": "14.0.0",
6a7
> 	"funding": "https://github.com/sponsors/sindresorhus",
10c11
< 		"url": "sindresorhus.com"
---
> 		"url": "https://sindresorhus.com"
11a13
> 	"sideEffects": false,
13c15
< 		"node": ">=4"
---
> 		"node": ">=18"
16c18,21
< 		"test": "xo && ava"
---
> 		"test": "xo && ava && tsd",
> 		"prepare": "npm run --silent update-types",
> 		"update-builtin-globals": "node scripts/get-builtin-globals.mjs",
> 		"update-types": "node scripts/generate-types.mjs > index.d.ts"
19a25
> 		"index.d.ts",
33,34c39,43
< 		"ava": "0.21.0",
< 		"xo": "0.18.0"
---
> 		"ava": "^2.4.0",
> 		"cheerio": "^1.0.0-rc.12",
> 		"tsd": "^0.30.4",
> 		"type-fest": "^4.10.2",
> 		"xo": "^0.36.1"
39c48,56
< 		]
---
> 		],
> 		"rules": {
> 			"node/no-unsupported-features/es-syntax": "off"
> 		}
> 	},
> 	"tsd": {
> 		"compilerOptions": {
> 			"resolveJsonModule": true
> 		}
diff -r npm/node_modules/globals/readme.md bun/node_modules/globals/readme.md
1c1
< # globals [![Build Status](https://travis-ci.org/sindresorhus/globals.svg?branch=master)](https://travis-ci.org/sindresorhus/globals)
---
> # globals
5c5
< Extracted from [JSHint](https://github.com/jshint/jshint/blob/3a8efa979dbb157bfb5c10b5826603a55a33b9ad/src/vars.js) and [ESLint](https://github.com/eslint/eslint/blob/b648406218f8a2d7302b98f5565e23199f44eb31/conf/environments.json) and merged.
---
> It's just a [JSON file](globals.json), so use it in any environment.
7c7
< It's just a [JSON file](globals.json), so use it in whatever environment you like.
---
> This package is used by ESLint.
9c9
< **This module [no longer accepts](https://github.com/sindresorhus/globals/issues/82) new environments. If you need it for ESLint, just [create a plugin](http://eslint.org/docs/developer-guide/working-with-plugins#environments-in-plugins).**
---
> **This package [no longer accepts](https://github.com/sindresorhus/globals/issues/82) new environments. If you need it for ESLint, just [create a plugin](http://eslint.org/docs/developer-guide/working-with-plugins#environments-in-plugins).**
11d10
< 
13a13,14
> ```sh
> npm install globals
15,16d15
< $ npm install globals
< ```
18d16
< 
31c29
< 	...
---
> 	…
37a36
> For Node.js this package provides two sets of globals:
39c38,42
< ## License
---
> - `globals.nodeBuiltin`: Globals available to all code running in Node.js.
> 	These will usually be available as properties on the `global` object and include `process`, `Buffer`, but not CommonJS arguments like `require`.
> 	See: https://nodejs.org/api/globals.html
> - `globals.node`: A combination of the globals from `nodeBuiltin` plus all CommonJS arguments ("CommonJS module scope").
> 	See: https://nodejs.org/api/modules.html#modules_the_module_scope
41c44
< MIT © [Sindre Sorhus](https://sindresorhus.com)
---
> When analyzing code that is known to run outside of a CommonJS wrapper, for example, JavaScript modules, `nodeBuiltin` can find accidental CommonJS references.
Only in bun/node_modules/globby: node_modules
diff -r npm/node_modules/ignore/README.md bun/node_modules/ignore/README.md
1,34c1,3
< <table><thead>
<   <tr>
<     <th>Linux</th>
<     <th>OS X</th>
<     <th>Windows</th>
<     <th>Coverage</th>
<     <th>Downloads</th>
<   </tr>
< </thead><tbody><tr>
<   <td colspan="2" align="center">
<     <a href="https://github.com/kaelzhang/node-ignore/actions/workflows/nodejs.yml">
<     <img
<       src="https://github.com/kaelzhang/node-ignore/actions/workflows/nodejs.yml/badge.svg"
<       alt="Build Status" /></a>
<   </td>
<   <td align="center">
<     <a href="https://ci.appveyor.com/project/kaelzhang/node-ignore">
<     <img
<       src="https://ci.appveyor.com/api/projects/status/github/kaelzhang/node-ignore?branch=master&svg=true"
<       alt="Windows Build Status" /></a>
<   </td>
<   <td align="center">
<     <a href="https://codecov.io/gh/kaelzhang/node-ignore">
<     <img
<       src="https://codecov.io/gh/kaelzhang/node-ignore/branch/master/graph/badge.svg"
<       alt="Coverage Status" /></a>
<   </td>
<   <td align="center">
<     <a href="https://www.npmjs.org/package/ignore">
<     <img
<       src="http://img.shields.io/npm/dm/ignore.svg"
<       alt="npm module downloads per month" /></a>
<   </td>
< </tr></tbody></table>
---
> | Linux / MacOS / Windows | Coverage | Downloads |
> | ----------------------- | -------- | --------- |
> | [![build][bb]][bl]      | [![coverage][cb]][cl] | [![downloads][db]][dl] |
35a5,13
> [bb]: https://github.com/kaelzhang/node-ignore/actions/workflows/nodejs.yml/badge.svg
> [bl]: https://github.com/kaelzhang/node-ignore/actions/workflows/nodejs.yml
> 
> [cb]: https://codecov.io/gh/kaelzhang/node-ignore/branch/master/graph/badge.svg
> [cl]: https://codecov.io/gh/kaelzhang/node-ignore
> 
> [db]: http://img.shields.io/npm/dm/ignore.svg
> [dl]: https://www.npmjs.org/package/ignore
> 
126a105
> ## .add({pattern: string, mark?: string}): this  since 7.0.0
128,129c107,109
< - **pattern** `String | Ignore` An ignore pattern string, or the `Ignore` instance
< - **patterns** `Array<String | Ignore>` Array of ignore patterns.
---
> - **pattern** `string | Ignore` An ignore pattern string, or the `Ignore` instance
> - **patterns** `Array<string | Ignore>` Array of ignore patterns.
> - **mark?** `string` Pattern mark, which is used to associate the pattern with a certain marker, such as the line no of the `.gitignore` file. Actually it could be an arbitrary string and is optional.
152c132
< ## <strike>.addIgnoreFile(path)</strike>
---
> ## .ignores(pathname: [Pathname](#pathname-conventions)): boolean
154c134
< REMOVED in `3.x` for now.
---
> > new in 3.2.0
156c136
< To upgrade `ignore@2.x` up to `3.x`, use
---
> Returns `Boolean` whether `pathname` should be ignored.
159,163c139
< import fs from 'fs'
< 
< if (fs.existsSync(filename)) {
<   ignore().add(fs.readFileSync(filename).toString())
< }
---
> ig.ignores('.abc/a.js')    // true
166c142
< instead.
---
> Please **PAY ATTENTION** that `.ignores()` is **NOT** equivalent to `git check-ignore` although in most cases they return equivalent results.
168c144
< ## .filter(paths: Array&lt;Pathname&gt;): Array&lt;Pathname&gt;
---
> However, for the purposes of imitating the behavior of `git check-ignore`, please use `.checkIgnore()` instead.
170,177d145
< ```ts
< type Pathname = string
< ```
< 
< Filters the given array of pathnames, and returns the filtered array.
< 
< - **paths** `Array.<Pathname>` The array of `pathname`s to be filtered.
< 
233c201,203
< `node-ignore` does NO `fs.stat` during path matching, so for the example below:
---
> `node-ignore` does NO `fs.stat` during path matching, so `node-ignore` treats
> - `foo` as a file
> - **`foo/` as a directory**
234a205,206
> For the example below:
> 
269d240
< ## .ignores(pathname: Pathname): boolean
271c242
< > new in 3.2.0
---
> ## .filter(paths: Array&lt;Pathname&gt;): Array&lt;Pathname&gt;
273,276c244,245
< Returns `Boolean` whether `pathname` should be ignored.
< 
< ```js
< ig.ignores('.abc/a.js')    // true
---
> ```ts
> type Pathname = string
278a248,251
> Filters the given array of pathnames, and returns the filtered array.
> 
> - **paths** `Array.<Pathname>` The array of `pathname`s to be filtered.
> 
285c258
< ## .test(pathname: Pathname) since 5.0.0
---
> ## .test(pathname: Pathname): TestResult
286a260,261
> > New in 5.0.0
> 
289a265
> // Since 5.0.0
293a270,271
>   // The `IgnoreRule` which ignores the pathname
>   rule?: IgnoreRule
294a273,282
> 
> // Since 7.0.0
> interface IgnoreRule {
>   // The original pattern
>   pattern: string
>   // Whether the pattern is a negative pattern
>   negative: boolean
>   // Which is used for other packages to build things upon `node-ignore`
>   mark?: string
> }
301c289
< ## static `ignore.isPathValid(pathname): boolean` since 5.0.0
---
> ## .checkIgnore(target: string): TestResult
302a291,324
> > new in 7.0.0
> 
> Debugs gitignore / exclude files, which is equivalent to `git check-ignore -v`. Usually this method is used for other packages to implement the function of `git check-ignore -v` upon `node-ignore`
> 
> - **target** `string` the target to test.
> 
> Returns `TestResult`
> 
> ```js
> ig.add({
>   pattern: 'foo/*',
>   mark: '60'
> })
> 
> const {
>   ignored,
>   rule
> } = checkIgnore('foo/')
> 
> if (ignored) {
>   console.log(`.gitignore:${result}:${rule.mark}:${rule.pattern} foo/`)
> }
> 
> // .gitignore:60:foo/* foo/
> ```
> 
> Please pay attention that this method does not have a strong built-in cache mechanism.
> 
> The purpose of introducing this method is to make it possible to implement the `git check-ignore` command in JavaScript based on `node-ignore`.
> 
> So do not use this method in those situations where performance is extremely important.
> 
> ## static `isPathValid(pathname): boolean` since 5.0.0
> 
308c330,332
< ignore.isPathValid('./foo')  // false
---
> import {isPathValid} from 'ignore'
> 
> isPathValid('./foo')  // false
310a335,350
> ## <strike>.addIgnoreFile(path)</strike>
> 
> REMOVED in `3.x` for now.
> 
> To upgrade `ignore@2.x` up to `3.x`, use
> 
> ```js
> import fs from 'fs'
> 
> if (fs.existsSync(filename)) {
>   ignore().add(fs.readFileSync(filename).toString())
> }
> ```
> 
> instead.
> 
315c355
< Similar as the `core.ignorecase` option of [git-config](https://git-scm.com/docs/git-config), `node-ignore` will be case insensitive if `options.ignorecase` is set to `true` (the default value), otherwise case sensitive.
---
> Similar to the `core.ignorecase` option of [git-config](https://git-scm.com/docs/git-config), `node-ignore` will be case insensitive if `options.ignorecase` is set to `true` (the default value), otherwise case sensitive.
329c369
< Which is alternative to `options.ignoreCase`
---
> Which is an alternative to `options.ignoreCase`
382c422
< .filter(isValidPath)
---
> .filter(isPathValid)
diff -r npm/node_modules/ignore/index.d.ts bun/node_modules/ignore/index.d.ts
2a3,8
> interface IgnoreRule {
>   pattern: string
>   mark?: string
>   negative: boolean
> }
> 
5a12
>   rule?: IgnoreRule
8,14c15,18
< export interface Ignore {
<   /**
<    * Adds one or several rules to the current manager.
<    * @param  {string[]} patterns
<    * @returns IgnoreBase
<    */
<   add(patterns: string | Ignore | readonly (string | Ignore)[]): this
---
> interface PatternParams {
>   pattern: string
>   mark?: string
> }
16,22c20,33
<   /**
<    * Filters the given array of pathnames, and returns the filtered array.
<    * NOTICE that each path here should be a relative path to the root of your repository.
<    * @param paths the array of paths to be filtered.
<    * @returns The filtered array of paths
<    */
<   filter(pathnames: readonly Pathname[]): Pathname[]
---
> /**
>  * Creates new ignore manager.
>  */
> declare function ignore(options?: ignore.Options): ignore.Ignore
> declare namespace ignore {
>   interface Ignore {
>     /**
>      * Adds one or several rules to the current manager.
>      * @param  {string[]} patterns
>      * @returns IgnoreBase
>      */
>     add(
>       patterns: string | Ignore | readonly (string | Ignore)[] | PatternParams
>     ): this
24,28c35,41
<   /**
<    * Creates a filter function which could filter
<    * an array of paths with Array.prototype.filter.
<    */
<   createFilter(): (pathname: Pathname) => boolean
---
>     /**
>      * Filters the given array of pathnames, and returns the filtered array.
>      * NOTICE that each path here should be a relative path to the root of your repository.
>      * @param paths the array of paths to be filtered.
>      * @returns The filtered array of paths
>      */
>     filter(pathnames: readonly Pathname[]): Pathname[]
30,35c43,47
<   /**
<    * Returns Boolean whether pathname should be ignored.
<    * @param  {string} pathname a path to check
<    * @returns boolean
<    */
<   ignores(pathname: Pathname): boolean
---
>     /**
>      * Creates a filter function which could filter
>      * an array of paths with Array.prototype.filter.
>      */
>     createFilter(): (pathname: Pathname) => boolean
37,43c49,54
<   /**
<    * Returns whether pathname should be ignored or unignored
<    * @param  {string} pathname a path to check
<    * @returns TestResult
<    */
<   test(pathname: Pathname): TestResult
< }
---
>     /**
>      * Returns Boolean whether pathname should be ignored.
>      * @param  {string} pathname a path to check
>      * @returns boolean
>      */
>     ignores(pathname: Pathname): boolean
45,50c56,61
< export interface Options {
<   ignorecase?: boolean
<   // For compatibility
<   ignoreCase?: boolean
<   allowRelativePaths?: boolean
< }
---
>     /**
>      * Returns whether pathname should be ignored or unignored
>      * @param  {string} pathname a path to check
>      * @returns TestResult
>      */
>     test(pathname: Pathname): TestResult
52,55c63,69
< /**
<  * Creates new ignore manager.
<  */
< declare function ignore(options?: Options): Ignore
---
>     /**
>      * Debugs ignore rules and returns the checking result, which is
>      *   equivalent to `git check-ignore -v`.
>      * @returns TestResult
>      */
>     checkIgnore(pathname: Pathname): TestResult
>   }
57,58c71,78
< declare namespace ignore {
<   export function isPathValid (pathname: string): boolean
---
>   interface Options {
>     ignorecase?: boolean
>     // For compatibility
>     ignoreCase?: boolean
>     allowRelativePaths?: boolean
>   }
> 
>   function isPathValid(pathname: string): boolean
61c81
< export default ignore
---
> export = ignore
diff -r npm/node_modules/ignore/index.js bun/node_modules/ignore/index.js
7a8
> const UNDEFINED = undefined
16,21d16
< // /foo,
< // ./foo,
< // ../foo,
< // .
< // ..
< const REGEX_TEST_INVALID_PATH = /^\.*\/|^\.+$/
22a18,29
> // Invalid:
> // - /foo,
> // - ./foo,
> // - ../foo,
> // - .
> // - ..
> // Valid:
> // - .foo
> const REGEX_TEST_INVALID_PATH = /^\.{0,2}\/|^\.{1,2}$/
> 
> const REGEX_TEST_TRAILING_SLASH = /\/$/
> 
33c40
< const define = (object, key, value) =>
---
> const define = (object, key, value) => {
34a42,43
>   return value
> }
71c80
<     // remove BOM
---
>     // Remove BOM
92c101
<   // replace (\ ) with ' '
---
>   // Replace (\ ) with ' '
296c305,306
<   ],
---
>   ]
> ]
298,305c308,311
<   // trailing wildcard
<   [
<     /(\^|\\\/)?\\\*$/,
<     (_, p1) => {
<       const prefix = p1
<         // '\^':
<         // '/*' does not match EMPTY
<         // '/*' does not match everything
---
> const REGEX_REPLACE_TRAILING_WILDCARD = /(^|\\\/)?\\\*$/
> const MODE_IGNORE = 'regex'
> const MODE_CHECK_IGNORE = 'checkRegex'
> const UNDERSCORE = '_'
307,309c313,318
<         // '\\\/':
<         // 'abc/*' does not match 'abc/'
<         ? `${p1}[^/]+`
---
> const TRAILING_WILD_CARD_REPLACERS = {
>   [MODE_IGNORE] (_, p1) {
>     const prefix = p1
>       // '\^':
>       // '/*' does not match EMPTY
>       // '/*' does not match everything
311,313c320,322
<         // 'a*' matches 'a'
<         // 'a*' matches 'aa'
<         : '[^/]*'
---
>       // '\\\/':
>       // 'abc/*' does not match 'abc/'
>       ? `${p1}[^/]+`
315,318c324,326
<       return `${prefix}(?=$|\\/$)`
<     }
<   ],
< ]
---
>       // 'a*' matches 'a'
>       // 'a*' matches 'aa'
>       : '[^/]*'
320,321c328,329
< // A simple cache, because an ignore rule only has only one certain meaning
< const regexCache = Object.create(null)
---
>     return `${prefix}(?=$|\\/$)`
>   },
323,325c331,336
< // @param {pattern}
< const makeRegex = (pattern, ignoreCase) => {
<   let source = regexCache[pattern]
---
>   [MODE_CHECK_IGNORE] (_, p1) {
>     // When doing `git check-ignore`
>     const prefix = p1
>       // '\\\/':
>       // 'abc/*' DOES match 'abc/' !
>       ? `${p1}[^/]*`
327,334c338,340
<   if (!source) {
<     source = REPLACERS.reduce(
<       (prev, [matcher, replacer]) =>
<         prev.replace(matcher, replacer.bind(pattern)),
<       pattern
<     )
<     regexCache[pattern] = source
<   }
---
>       // 'a*' matches 'a'
>       // 'a*' matches 'aa'
>       : '[^/]*'
336,338c342,343
<   return ignoreCase
<     ? new RegExp(source, 'i')
<     : new RegExp(source)
---
>     return `${prefix}(?=$|\\/$)`
>   }
340a346,352
> // @param {pattern}
> const makeRegexPrefix = pattern => REPLACERS.reduce(
>   (prev, [matcher, replacer]) =>
>     prev.replace(matcher, replacer.bind(pattern)),
>   pattern
> )
> 
352c364,366
< const splitPattern = pattern => pattern.split(REGEX_SPLITALL_CRLF)
---
> const splitPattern = pattern => pattern
> .split(REGEX_SPLITALL_CRLF)
> .filter(Boolean)
356d369
<     origin,
357a371,373
>     mark,
>     body,
>     ignoreCase,
359c375
<     regex
---
>     prefix
361d376
<     this.origin = origin
362a378
>     this.mark = mark
364c380,383
<     this.regex = regex
---
> 
>     define(this, 'body', body)
>     define(this, 'ignoreCase', ignoreCase)
>     define(this, 'regexPrefix', prefix)
365a385,419
> 
>   get regex () {
>     const key = UNDERSCORE + MODE_IGNORE
> 
>     if (this[key]) {
>       return this[key]
>     }
> 
>     return this._make(MODE_IGNORE, key)
>   }
> 
>   get checkRegex () {
>     const key = UNDERSCORE + MODE_CHECK_IGNORE
> 
>     if (this[key]) {
>       return this[key]
>     }
> 
>     return this._make(MODE_CHECK_IGNORE, key)
>   }
> 
>   _make (mode, key) {
>     const str = this.regexPrefix.replace(
>       REGEX_REPLACE_TRAILING_WILDCARD,
> 
>       // It does not need to bind pattern
>       TRAILING_WILD_CARD_REPLACERS[mode]
>     )
> 
>     const regex = this.ignoreCase
>       ? new RegExp(str, 'i')
>       : new RegExp(str)
> 
>     return define(this, key, regex)
>   }
368,369c422,425
< const createRule = (pattern, ignoreCase) => {
<   const origin = pattern
---
> const createRule = ({
>   pattern,
>   mark
> }, ignoreCase) => {
370a427
>   let body = pattern
373c430
<   if (pattern.indexOf('!') === 0) {
---
>   if (body.indexOf('!') === 0) {
375c432
<     pattern = pattern.substr(1)
---
>     body = body.substr(1)
378c435
<   pattern = pattern
---
>   body = body
386c443
<   const regex = makeRegex(pattern, ignoreCase)
---
>   const regexPrefix = makeRegexPrefix(body)
389d445
<     origin,
390a447,449
>     mark,
>     body,
>     ignoreCase,
392c451
<     regex
---
>     regexPrefix
395a455,555
> class RuleManager {
>   constructor (ignoreCase) {
>     this._ignoreCase = ignoreCase
>     this._rules = []
>   }
> 
>   _add (pattern) {
>     // #32
>     if (pattern && pattern[KEY_IGNORE]) {
>       this._rules = this._rules.concat(pattern._rules._rules)
>       this._added = true
>       return
>     }
> 
>     if (isString(pattern)) {
>       pattern = {
>         pattern
>       }
>     }
> 
>     if (checkPattern(pattern.pattern)) {
>       const rule = createRule(pattern, this._ignoreCase)
>       this._added = true
>       this._rules.push(rule)
>     }
>   }
> 
>   // @param {Array<string> | string | Ignore} pattern
>   add (pattern) {
>     this._added = false
> 
>     makeArray(
>       isString(pattern)
>         ? splitPattern(pattern)
>         : pattern
>     ).forEach(this._add, this)
> 
>     return this._added
>   }
> 
>   // Test one single path without recursively checking parent directories
>   //
>   // - checkUnignored `boolean` whether should check if the path is unignored,
>   //   setting `checkUnignored` to `false` could reduce additional
>   //   path matching.
>   // - check `string` either `MODE_IGNORE` or `MODE_CHECK_IGNORE`
> 
>   // @returns {TestResult} true if a file is ignored
>   test (path, checkUnignored, mode) {
>     let ignored = false
>     let unignored = false
>     let matchedRule
> 
>     this._rules.forEach(rule => {
>       const {negative} = rule
> 
>       //          |           ignored : unignored
>       // -------- | ---------------------------------------
>       // negative |   0:0   |   0:1   |   1:0   |   1:1
>       // -------- | ------- | ------- | ------- | --------
>       //     0    |  TEST   |  TEST   |  SKIP   |    X
>       //     1    |  TESTIF |  SKIP   |  TEST   |    X
> 
>       // - SKIP: always skip
>       // - TEST: always test
>       // - TESTIF: only test if checkUnignored
>       // - X: that never happen
>       if (
>         unignored === negative && ignored !== unignored
>         || negative && !ignored && !unignored && !checkUnignored
>       ) {
>         return
>       }
> 
>       const matched = rule[mode].test(path)
> 
>       if (!matched) {
>         return
>       }
> 
>       ignored = !negative
>       unignored = negative
> 
>       matchedRule = negative
>         ? UNDEFINED
>         : rule
>     })
> 
>     const ret = {
>       ignored,
>       unignored
>     }
> 
>     if (matchedRule) {
>       ret.rule = matchedRule
>     }
> 
>     return ret
>   }
> }
> 
427a588,590
> 
> // On windows, the following function will be replaced
> /* istanbul ignore next */
429a593
> 
438,440c602,603
<     this._rules = []
<     this._ignoreCase = ignoreCase
<     this._allowRelativePaths = allowRelativePaths
---
>     this._rules = new RuleManager(ignoreCase)
>     this._strictPathCheck = !allowRelativePaths
444a608
>     // A cache for the result of `.ignores()`
445a610,611
> 
>     // A cache for the result of `.test()`
449,464d614
<   _addPattern (pattern) {
<     // #32
<     if (pattern && pattern[KEY_IGNORE]) {
<       this._rules = this._rules.concat(pattern._rules)
<       this._added = true
<       return
<     }
< 
<     if (checkPattern(pattern)) {
<       const rule = createRule(pattern, this._ignoreCase)
<       this._added = true
<       this._rules.push(rule)
<     }
<   }
< 
<   // @param {Array<string> | string | Ignore} pattern
466,476c616,619
<     this._added = false
< 
<     makeArray(
<       isString(pattern)
<         ? splitPattern(pattern)
<         : pattern
<     ).forEach(this._addPattern, this)
< 
<     // Some rules have just added to the ignore,
<     // making the behavior changed.
<     if (this._added) {
---
>     if (this._rules.add(pattern)) {
>       // Some rules have just added to the ignore,
>       //   making the behavior changed,
>       //   so we need to re-initialize the result cache
488,530d630
<   //          |           ignored : unignored
<   // negative |   0:0   |   0:1   |   1:0   |   1:1
<   // -------- | ------- | ------- | ------- | --------
<   //     0    |  TEST   |  TEST   |  SKIP   |    X
<   //     1    |  TESTIF |  SKIP   |  TEST   |    X
< 
<   // - SKIP: always skip
<   // - TEST: always test
<   // - TESTIF: only test if checkUnignored
<   // - X: that never happen
< 
<   // @param {boolean} whether should check if the path is unignored,
<   //   setting `checkUnignored` to `false` could reduce additional
<   //   path matching.
< 
<   // @returns {TestResult} true if a file is ignored
<   _testOne (path, checkUnignored) {
<     let ignored = false
<     let unignored = false
< 
<     this._rules.forEach(rule => {
<       const {negative} = rule
<       if (
<         unignored === negative && ignored !== unignored
<         || negative && !ignored && !unignored && !checkUnignored
<       ) {
<         return
<       }
< 
<       const matched = rule.regex.test(path)
< 
<       if (matched) {
<         ignored = !negative
<         unignored = negative
<       }
<     })
< 
<     return {
<       ignored,
<       unignored
<     }
<   }
< 
540,542c640,642
<       this._allowRelativePaths
<         ? RETURN_FALSE
<         : throwError
---
>       this._strictPathCheck
>         ? throwError
>         : RETURN_FALSE
548c648,686
<   _t (path, cache, checkUnignored, slices) {
---
>   checkIgnore (path) {
>     // If the path doest not end with a slash, `.ignores()` is much equivalent
>     //   to `git check-ignore`
>     if (!REGEX_TEST_TRAILING_SLASH.test(path)) {
>       return this.test(path)
>     }
> 
>     const slices = path.split(SLASH).filter(Boolean)
>     slices.pop()
> 
>     if (slices.length) {
>       const parent = this._t(
>         slices.join(SLASH) + SLASH,
>         this._testCache,
>         true,
>         slices
>       )
> 
>       if (parent.ignored) {
>         return parent
>       }
>     }
> 
>     return this._rules.test(path, false, MODE_CHECK_IGNORE)
>   }
> 
>   _t (
>     // The path to be tested
>     path,
> 
>     // The cache for the result of a certain checking
>     cache,
> 
>     // Whether should check if the path is unignored
>     checkUnignored,
> 
>     // The path slices
>     slices
>   ) {
556c694
<       slices = path.split(SLASH)
---
>       slices = path.split(SLASH).filter(Boolean)
563c701
<       return cache[path] = this._testOne(path, checkUnignored)
---
>       return cache[path] = this._rules.test(path, checkUnignored, MODE_IGNORE)
578c716
<       : this._testOne(path, checkUnignored)
---
>       : this._rules.test(path, checkUnignored, MODE_IGNORE)
604,621c742,743
< factory.isPathValid = isPathValid
< 
< // Fixes typescript
< factory.default = factory
< 
< module.exports = factory
< 
< // Windows
< // --------------------------------------------------------------
< /* istanbul ignore if */
< if (
<   // Detect `process` so that it can run in browsers.
<   typeof process !== 'undefined'
<   && (
<     process.env && process.env.IGNORE_TEST_WIN32
<     || process.platform === 'win32'
<   )
< ) {
---
> /* istanbul ignore next */
> const setupWindows = () => {
632c754
<   const REGIX_IS_WINDOWS_PATH_ABSOLUTE = /^[a-z]:\//i
---
>   const REGEX_TEST_WINDOWS_PATH_ABSOLUTE = /^[a-z]:\//i
634c756
<     REGIX_IS_WINDOWS_PATH_ABSOLUTE.test(path)
---
>     REGEX_TEST_WINDOWS_PATH_ABSOLUTE.test(path)
636a759,784
> 
> 
> // Windows
> // --------------------------------------------------------------
> /* istanbul ignore next */
> if (
>   // Detect `process` so that it can run in browsers.
>   typeof process !== 'undefined'
>   && process.platform === 'win32'
> ) {
>   setupWindows()
> }
> 
> // COMMONJS_EXPORTS ////////////////////////////////////////////////////////////
> 
> module.exports = factory
> 
> // Although it is an anti-pattern,
> //   it is still widely misused by a lot of libraries in github
> // Ref: https://github.com/search?q=ignore.default%28%29&type=code
> factory.default = factory
> 
> module.exports.isPathValid = isPathValid
> 
> // For testing purposes
> define(module.exports, Symbol.for('setupWindows'), setupWindows)
diff -r npm/node_modules/ignore/legacy.js bun/node_modules/ignore/legacy.js
2a3
> var _TRAILING_WILD_CARD_R;
3a5
> function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
6,8d7
< function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
< function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
< function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
14a14,16
> function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
> function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
> function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
18a21
> var UNDEFINED = undefined;
27,32c30,40
< // /foo,
< // ./foo,
< // ../foo,
< // .
< // ..
< var REGEX_TEST_INVALID_PATH = /^\.*\/|^\.+$/;
---
> 
> // Invalid:
> // - /foo,
> // - ./foo,
> // - ../foo,
> // - .
> // - ..
> // Valid:
> // - .foo
> var REGEX_TEST_INVALID_PATH = /^\.{0,2}\/|^\.{1,2}$/;
> var REGEX_TEST_TRAILING_SLASH = /\/$/;
43c51
<   return Object.defineProperty(object, key, {
---
>   Object.defineProperty(object, key, {
45a54
>   return value;
81c90
< // remove BOM
---
> // Remove BOM
96c105
< // replace (\ ) with ' '
---
> // Replace (\ ) with ' '
268,270c277,282
< }],
< // trailing wildcard
< [/(\^|\\\/)?\\\*$/, function (_, p1) {
---
> }]];
> var REGEX_REPLACE_TRAILING_WILDCARD = /(^|\\\/)?\\\*$/;
> var MODE_IGNORE = 'regex';
> var MODE_CHECK_IGNORE = 'checkRegex';
> var UNDERSCORE = '_';
> var TRAILING_WILD_CARD_REPLACERS = (_TRAILING_WILD_CARD_R = {}, _defineProperty(_TRAILING_WILD_CARD_R, MODE_IGNORE, function (_, p1) {
282c294,303
< }]];
---
> }), _defineProperty(_TRAILING_WILD_CARD_R, MODE_CHECK_IGNORE, function (_, p1) {
>   // When doing `git check-ignore`
>   var prefix = p1
>   // '\\\/':
>   // 'abc/*' DOES match 'abc/' !
>   ? "".concat(p1, "[^/]*") // 'a*' matches 'a'
>   // 'a*' matches 'aa'
>   : '[^/]*';
>   return "".concat(prefix, "(?=$|\\/$)");
> }), _TRAILING_WILD_CARD_R);
284,286d304
< // A simple cache, because an ignore rule only has only one certain meaning
< var regexCache = Object.create(null);
< 
288,299c306,312
< var makeRegex = function makeRegex(pattern, ignoreCase) {
<   var source = regexCache[pattern];
<   if (!source) {
<     source = REPLACERS.reduce(function (prev, _ref) {
<       var _ref2 = _slicedToArray(_ref, 2),
<         matcher = _ref2[0],
<         replacer = _ref2[1];
<       return prev.replace(matcher, replacer.bind(pattern));
<     }, pattern);
<     regexCache[pattern] = source;
<   }
<   return ignoreCase ? new RegExp(source, 'i') : new RegExp(source);
---
> var makeRegexPrefix = function makeRegexPrefix(pattern) {
>   return REPLACERS.reduce(function (prev, _ref) {
>     var _ref2 = _slicedToArray(_ref, 2),
>       matcher = _ref2[0],
>       replacer = _ref2[1];
>     return prev.replace(matcher, replacer.bind(pattern));
>   }, pattern);
313c326
<   return pattern.split(REGEX_SPLITALL_CRLF);
---
>   return pattern.split(REGEX_SPLITALL_CRLF).filter(Boolean);
315,323c328,370
< var IgnoreRule = /*#__PURE__*/_createClass(function IgnoreRule(origin, pattern, negative, regex) {
<   _classCallCheck(this, IgnoreRule);
<   this.origin = origin;
<   this.pattern = pattern;
<   this.negative = negative;
<   this.regex = regex;
< });
< var createRule = function createRule(pattern, ignoreCase) {
<   var origin = pattern;
---
> var IgnoreRule = /*#__PURE__*/function () {
>   function IgnoreRule(pattern, mark, body, ignoreCase, negative, prefix) {
>     _classCallCheck(this, IgnoreRule);
>     this.pattern = pattern;
>     this.mark = mark;
>     this.negative = negative;
>     define(this, 'body', body);
>     define(this, 'ignoreCase', ignoreCase);
>     define(this, 'regexPrefix', prefix);
>   }
>   _createClass(IgnoreRule, [{
>     key: "regex",
>     get: function get() {
>       var key = UNDERSCORE + MODE_IGNORE;
>       if (this[key]) {
>         return this[key];
>       }
>       return this._make(MODE_IGNORE, key);
>     }
>   }, {
>     key: "checkRegex",
>     get: function get() {
>       var key = UNDERSCORE + MODE_CHECK_IGNORE;
>       if (this[key]) {
>         return this[key];
>       }
>       return this._make(MODE_CHECK_IGNORE, key);
>     }
>   }, {
>     key: "_make",
>     value: function _make(mode, key) {
>       var str = this.regexPrefix.replace(REGEX_REPLACE_TRAILING_WILDCARD,
>       // It does not need to bind pattern
>       TRAILING_WILD_CARD_REPLACERS[mode]);
>       var regex = this.ignoreCase ? new RegExp(str, 'i') : new RegExp(str);
>       return define(this, key, regex);
>     }
>   }]);
>   return IgnoreRule;
> }();
> var createRule = function createRule(_ref3, ignoreCase) {
>   var pattern = _ref3.pattern,
>     mark = _ref3.mark;
324a372
>   var body = pattern;
327c375
<   if (pattern.indexOf('!') === 0) {
---
>   if (body.indexOf('!') === 0) {
329c377
<     pattern = pattern.substr(1);
---
>     body = body.substr(1);
331c379
<   pattern = pattern
---
>   body = body
338,339c386,387
<   var regex = makeRegex(pattern, ignoreCase);
<   return new IgnoreRule(origin, pattern, negative, regex);
---
>   var regexPrefix = makeRegexPrefix(body);
>   return new IgnoreRule(pattern, mark, body, ignoreCase, negative, regexPrefix);
340a389,475
> var RuleManager = /*#__PURE__*/function () {
>   function RuleManager(ignoreCase) {
>     _classCallCheck(this, RuleManager);
>     this._ignoreCase = ignoreCase;
>     this._rules = [];
>   }
>   _createClass(RuleManager, [{
>     key: "_add",
>     value: function _add(pattern) {
>       // #32
>       if (pattern && pattern[KEY_IGNORE]) {
>         this._rules = this._rules.concat(pattern._rules._rules);
>         this._added = true;
>         return;
>       }
>       if (isString(pattern)) {
>         pattern = {
>           pattern: pattern
>         };
>       }
>       if (checkPattern(pattern.pattern)) {
>         var rule = createRule(pattern, this._ignoreCase);
>         this._added = true;
>         this._rules.push(rule);
>       }
>     }
> 
>     // @param {Array<string> | string | Ignore} pattern
>   }, {
>     key: "add",
>     value: function add(pattern) {
>       this._added = false;
>       makeArray(isString(pattern) ? splitPattern(pattern) : pattern).forEach(this._add, this);
>       return this._added;
>     }
> 
>     // Test one single path without recursively checking parent directories
>     //
>     // - checkUnignored `boolean` whether should check if the path is unignored,
>     //   setting `checkUnignored` to `false` could reduce additional
>     //   path matching.
>     // - check `string` either `MODE_IGNORE` or `MODE_CHECK_IGNORE`
> 
>     // @returns {TestResult} true if a file is ignored
>   }, {
>     key: "test",
>     value: function test(path, checkUnignored, mode) {
>       var ignored = false;
>       var unignored = false;
>       var matchedRule;
>       this._rules.forEach(function (rule) {
>         var negative = rule.negative;
> 
>         //          |           ignored : unignored
>         // -------- | ---------------------------------------
>         // negative |   0:0   |   0:1   |   1:0   |   1:1
>         // -------- | ------- | ------- | ------- | --------
>         //     0    |  TEST   |  TEST   |  SKIP   |    X
>         //     1    |  TESTIF |  SKIP   |  TEST   |    X
> 
>         // - SKIP: always skip
>         // - TEST: always test
>         // - TESTIF: only test if checkUnignored
>         // - X: that never happen
>         if (unignored === negative && ignored !== unignored || negative && !ignored && !unignored && !checkUnignored) {
>           return;
>         }
>         var matched = rule[mode].test(path);
>         if (!matched) {
>           return;
>         }
>         ignored = !negative;
>         unignored = negative;
>         matchedRule = negative ? UNDEFINED : rule;
>       });
>       var ret = {
>         ignored: ignored,
>         unignored: unignored
>       };
>       if (matchedRule) {
>         ret.rule = matchedRule;
>       }
>       return ret;
>     }
>   }]);
>   return RuleManager;
> }();
364a500,502
> 
> // On windows, the following function will be replaced
> /* istanbul ignore next */
370,376c508,514
<     var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
<       _ref3$ignorecase = _ref3.ignorecase,
<       ignorecase = _ref3$ignorecase === void 0 ? true : _ref3$ignorecase,
<       _ref3$ignoreCase = _ref3.ignoreCase,
<       ignoreCase = _ref3$ignoreCase === void 0 ? ignorecase : _ref3$ignoreCase,
<       _ref3$allowRelativePa = _ref3.allowRelativePaths,
<       allowRelativePaths = _ref3$allowRelativePa === void 0 ? false : _ref3$allowRelativePa;
---
>     var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
>       _ref4$ignorecase = _ref4.ignorecase,
>       ignorecase = _ref4$ignorecase === void 0 ? true : _ref4$ignorecase,
>       _ref4$ignoreCase = _ref4.ignoreCase,
>       ignoreCase = _ref4$ignoreCase === void 0 ? ignorecase : _ref4$ignoreCase,
>       _ref4$allowRelativePa = _ref4.allowRelativePaths,
>       allowRelativePaths = _ref4$allowRelativePa === void 0 ? false : _ref4$allowRelativePa;
379,381c517,518
<     this._rules = [];
<     this._ignoreCase = ignoreCase;
<     this._allowRelativePaths = allowRelativePaths;
---
>     this._rules = new RuleManager(ignoreCase);
>     this._strictPathCheck = !allowRelativePaths;
386a524
>       // A cache for the result of `.ignores()`
387a526,527
> 
>       // A cache for the result of `.test()`
391,407d530
<     key: "_addPattern",
<     value: function _addPattern(pattern) {
<       // #32
<       if (pattern && pattern[KEY_IGNORE]) {
<         this._rules = this._rules.concat(pattern._rules);
<         this._added = true;
<         return;
<       }
<       if (checkPattern(pattern)) {
<         var rule = createRule(pattern, this._ignoreCase);
<         this._added = true;
<         this._rules.push(rule);
<       }
<     }
< 
<     // @param {Array<string> | string | Ignore} pattern
<   }, {
410,415c533,536
<       this._added = false;
<       makeArray(isString(pattern) ? splitPattern(pattern) : pattern).forEach(this._addPattern, this);
< 
<       // Some rules have just added to the ignore,
<       // making the behavior changed.
<       if (this._added) {
---
>       if (this._rules.add(pattern)) {
>         // Some rules have just added to the ignore,
>         //   making the behavior changed,
>         //   so we need to re-initialize the result cache
428,465d548
<     //          |           ignored : unignored
<     // negative |   0:0   |   0:1   |   1:0   |   1:1
<     // -------- | ------- | ------- | ------- | --------
<     //     0    |  TEST   |  TEST   |  SKIP   |    X
<     //     1    |  TESTIF |  SKIP   |  TEST   |    X
< 
<     // - SKIP: always skip
<     // - TEST: always test
<     // - TESTIF: only test if checkUnignored
<     // - X: that never happen
< 
<     // @param {boolean} whether should check if the path is unignored,
<     //   setting `checkUnignored` to `false` could reduce additional
<     //   path matching.
< 
<     // @returns {TestResult} true if a file is ignored
<   }, {
<     key: "_testOne",
<     value: function _testOne(path, checkUnignored) {
<       var ignored = false;
<       var unignored = false;
<       this._rules.forEach(function (rule) {
<         var negative = rule.negative;
<         if (unignored === negative && ignored !== unignored || negative && !ignored && !unignored && !checkUnignored) {
<           return;
<         }
<         var matched = rule.regex.test(path);
<         if (matched) {
<           ignored = !negative;
<           unignored = negative;
<         }
<       });
<       return {
<         ignored: ignored,
<         unignored: unignored
<       };
<     }
< 
473c556
<       checkPath(path, originalPath, this._allowRelativePaths ? RETURN_FALSE : throwError);
---
>       checkPath(path, originalPath, this._strictPathCheck ? throwError : RETURN_FALSE);
476a560,577
>     key: "checkIgnore",
>     value: function checkIgnore(path) {
>       // If the path doest not end with a slash, `.ignores()` is much equivalent
>       //   to `git check-ignore`
>       if (!REGEX_TEST_TRAILING_SLASH.test(path)) {
>         return this.test(path);
>       }
>       var slices = path.split(SLASH).filter(Boolean);
>       slices.pop();
>       if (slices.length) {
>         var parent = this._t(slices.join(SLASH) + SLASH, this._testCache, true, slices);
>         if (parent.ignored) {
>           return parent;
>         }
>       }
>       return this._rules.test(path, false, MODE_CHECK_IGNORE);
>     }
>   }, {
478c579,587
<     value: function _t(path, cache, checkUnignored, slices) {
---
>     value: function _t(
>     // The path to be tested
>     path,
>     // The cache for the result of a certain checking
>     cache,
>     // Whether should check if the path is unignored
>     checkUnignored,
>     // The path slices
>     slices) {
485c594
<         slices = path.split(SLASH);
---
>         slices = path.split(SLASH).filter(Boolean);
491c600
<         return cache[path] = this._testOne(path, checkUnignored);
---
>         return cache[path] = this._rules.test(path, checkUnignored, MODE_IGNORE);
499c608
<       ? parent : this._testOne(path, checkUnignored);
---
>       ? parent : this._rules.test(path, checkUnignored, MODE_IGNORE);
535d643
< factory.isPathValid = isPathValid;
537,546c645,646
< // Fixes typescript
< factory["default"] = factory;
< module.exports = factory;
< 
< // Windows
< // --------------------------------------------------------------
< /* istanbul ignore if */
< if (
< // Detect `process` so that it can run in browsers.
< typeof process !== 'undefined' && (process.env && process.env.IGNORE_TEST_WIN32 || process.platform === 'win32')) {
---
> /* istanbul ignore next */
> var setupWindows = function setupWindows() {
555c655
<   var REGIX_IS_WINDOWS_PATH_ABSOLUTE = /^[a-z]:\//i;
---
>   var REGEX_TEST_WINDOWS_PATH_ABSOLUTE = /^[a-z]:\//i;
557c657
<     return REGIX_IS_WINDOWS_PATH_ABSOLUTE.test(path) || isNotRelative(path);
---
>     return REGEX_TEST_WINDOWS_PATH_ABSOLUTE.test(path) || isNotRelative(path);
558a659,667
> };
> 
> // Windows
> // --------------------------------------------------------------
> /* istanbul ignore next */
> if (
> // Detect `process` so that it can run in browsers.
> typeof process !== 'undefined' && process.platform === 'win32') {
>   setupWindows();
559a669,681
> 
> // COMMONJS_EXPORTS ////////////////////////////////////////////////////////////
> 
> module.exports = factory;
> 
> // Although it is an anti-pattern,
> //   it is still widely misused by a lot of libraries in github
> // Ref: https://github.com/search?q=ignore.default%28%29&type=code
> factory["default"] = factory;
> module.exports.isPathValid = isPathValid;
> 
> // For testing purposes
> define(module.exports, Symbol["for"]('setupWindows'), setupWindows);
diff -r npm/node_modules/ignore/package.json bun/node_modules/ignore/package.json
3c3
<   "version": "5.3.2",
---
>   "version": "7.0.5",
4a5
>   "types": "index.d.ts",
14,16c15,28
<     "test:lint": "eslint .",
<     "test:tsc": "tsc ./test/ts/simple.ts --lib ES6",
<     "test:ts": "node ./test/ts/simple.js",
---
> 
>     "==================== linting ======================": "",
>     "lint": "eslint .",
> 
>     "===================== import ======================": "",
>     "ts": "npm run test:ts && npm run test:16",
>     "test:ts": "ts-node ./test/import/simple.ts",
>     "test:16": "npm run test:ts:16 && npm run test:cjs:16 && npm run test:mjs:16",
>     "test:ts:16": "ts-node --compilerOptions '{\"moduleResolution\": \"Node16\", \"module\": \"Node16\"}' ./test/import/simple.ts && tsc ./test/import/simple.ts --lib ES6 --moduleResolution Node16 --module Node16 && node ./test/import/simple.js",
>     "test:cjs:16": "ts-node --compilerOptions '{\"moduleResolution\": \"Node16\", \"module\": \"Node16\"}' ./test/import/simple.cjs",
>     "test:mjs:16": "ts-node --compilerOptions '{\"moduleResolution\": \"Node16\", \"module\": \"Node16\"}' ./test/import/simple.mjs && babel -o ./test/import/simple-mjs.js ./test/import/simple.mjs && node ./test/import/simple-mjs.js",
> 
>     "===================== cases =======================": "",
>     "test:cases": "npm run tap test/*.test.js -- --coverage",
18,25c30,38
<     "test:git": "npm run tap test/git-check-ignore.js",
<     "test:ignore": "npm run tap test/ignore.js",
<     "test:ignore:only": "IGNORE_ONLY_IGNORES=1 npm run tap test/ignore.js",
<     "test:others": "npm run tap test/others.js",
<     "test:cases": "npm run tap test/*.js -- --coverage",
<     "test:no-coverage": "npm run tap test/*.js -- --no-check-coverage",
<     "test:only": "npm run test:lint && npm run test:tsc && npm run test:ts && npm run test:cases",
<     "test": "npm run test:only",
---
> 
>     "===================== debug =======================": "",
>     "test:git": "npm run tap test/git-check-ignore.test.js",
>     "test:ignore": "npm run tap test/ignore.test.js",
>     "test:ignore:only": "IGNORE_ONLY_IGNORES=1 npm run tap test/ignore.test.js",
>     "test:others": "npm run tap test/others.test.js",
>     "test:no-coverage": "npm run tap test/*.test.js -- --no-check-coverage",
> 
>     "test": "npm run lint && npm run ts && npm run build && npm run test:cases",
27,28c40
<     "report": "tap --coverage-report=html",
<     "posttest": "npm run report && codecov"
---
>     "report": "tap --coverage-report=html"
58c70
<     "codecov": "^3.8.2",
---
>     "@typescript-eslint/eslint-plugin": "^8.19.1",
69c81,82
<     "typescript": "^5.1.6"
---
>     "ts-node": "^10.9.2",
>     "typescript": "^5.6.2"
Only in bun/node_modules/micromatch: node_modules
diff -r npm/node_modules/minimatch/LICENSE bun/node_modules/minimatch/LICENSE
3c3
< Copyright (c) 2011-2023 Isaac Z. Schlueter and Contributors
---
> Copyright (c) Isaac Z. Schlueter and Contributors
diff -r npm/node_modules/minimatch/README.md bun/node_modules/minimatch/README.md
4a5,7
> [![Build Status](https://travis-ci.org/isaacs/minimatch.svg?branch=master)](http://travis-ci.org/isaacs/minimatch)
> 
> 
12,16c15,16
< ```js
< // hybrid module, load with require() or import
< import { minimatch } from 'minimatch'
< // or:
< const { minimatch } = require('minimatch')
---
> ```javascript
> var minimatch = require("minimatch")
18,20c18,20
< minimatch('bar.foo', '*.foo') // true!
< minimatch('bar.foo', '*.bar') // false!
< minimatch('bar.foo', '*.+(bar|foo)', { debug: true }) // true, and noisy!
---
> minimatch("bar.foo", "*.foo") // true!
> minimatch("bar.foo", "*.bar") // false!
> minimatch("bar.foo", "*.+(bar|foo)", { debug: true }) // true, and noisy!
27,37c27,29
< - Brace Expansion
< - Extended glob matching
< - "Globstar" `**` matching
< - [Posix character
<   classes](https://www.gnu.org/software/bash/manual/html_node/Pattern-Matching.html),
<   like `[[:alpha:]]`, supporting the full range of Unicode
<   characters. For example, `[[:alpha:]]` will match against
<   `'é'`, though `[a-zA-Z]` will not. Collating symbol and set
<   matching is not supported, so `[[=e=]]` will _not_ match `'é'`
<   and `[[.ch.]]` will not match `'ch'` in locales where `ch` is
<   considered a single character.
---
> * Brace Expansion
> * Extended glob matching
> * "Globstar" `**` matching
41,45c33,36
< - `man sh`
< - `man bash` [Pattern
<   Matching](https://www.gnu.org/software/bash/manual/html_node/Pattern-Matching.html)
< - `man 3 fnmatch`
< - `man 5 gitignore`
---
> * `man sh`
> * `man bash`
> * `man 3 fnmatch`
> * `man 5 gitignore`
47,83d37
< ## Windows
< 
< **Please only use forward-slashes in glob expressions.**
< 
< Though windows uses either `/` or `\` as its path separator, only `/`
< characters are used by this glob implementation. You must use
< forward-slashes **only** in glob expressions. Back-slashes in patterns
< will always be interpreted as escape characters, not path separators.
< 
< Note that `\` or `/` _will_ be interpreted as path separators in paths on
< Windows, and will match against `/` in glob expressions.
< 
< So just always use `/` in patterns.
< 
< ### UNC Paths
< 
< On Windows, UNC paths like `//?/c:/...` or
< `//ComputerName/Share/...` are handled specially.
< 
< - Patterns starting with a double-slash followed by some
<   non-slash characters will preserve their double-slash. As a
<   result, a pattern like `//*` will match `//x`, but not `/x`.
< - Patterns staring with `//?/<drive letter>:` will _not_ treat
<   the `?` as a wildcard character. Instead, it will be treated
<   as a normal string.
< - Patterns starting with `//?/<drive letter>:/...` will match
<   file paths starting with `<drive letter>:/...`, and vice versa,
<   as if the `//?/` was not present. This behavior only is
<   present when the drive letters are a case-insensitive match to
<   one another. The remaining portions of the path/pattern are
<   compared case sensitively, unless `nocase:true` is set.
< 
< Note that specifying a UNC path using `\` characters as path
< separators is always allowed in the file path argument, but only
< allowed in the pattern argument when `windowsPathsNoEscape: true`
< is set in the options.
< 
89c43
< var Minimatch = require('minimatch').Minimatch
---
> var Minimatch = require("minimatch").Minimatch
95,97c49,51
< - `pattern` The original pattern the minimatch object represents.
< - `options` The options supplied to the constructor.
< - `set` A 2-dimensional array of regexp or string expressions.
---
> * `pattern` The original pattern the minimatch object represents.
> * `options` The options supplied to the constructor.
> * `set` A 2-dimensional array of regexp or string expressions.
99,100c53,54
<   array corresponds to a brace-expanded pattern. Each item in the row
<   corresponds to a single path-part. For example, the pattern
---
>   array corresponds to a brace-expanded pattern.  Each item in the row
>   corresponds to a single path-part.  For example, the pattern
106,109c60,63
<   If a portion of the pattern doesn't have any "magic" in it
<   (that is, it's something like `"foo"` rather than `fo*o?`), then it
<   will be left as a string rather than converted to a regular
<   expression.
---
>     If a portion of the pattern doesn't have any "magic" in it
>     (that is, it's something like `"foo"` rather than `fo*o?`), then it
>     will be left as a string rather than converted to a regular
>     expression.
111,112c65,66
< - `regexp` Created by the `makeRe` method. A single regular expression
<   expressing the entire pattern. This is useful in cases where you wish
---
> * `regexp` Created by the `makeRe` method.  A single regular expression
>   expressing the entire pattern.  This is useful in cases where you wish
114,116c68,70
< - `negate` True if the pattern is negated.
< - `comment` True if the pattern is a comment.
< - `empty` True if the pattern is `""`.
---
> * `negate` True if the pattern is negated.
> * `comment` True if the pattern is a comment.
> * `empty` True if the pattern is `""`.
120c74
< - `makeRe()` Generate the `regexp` member if necessary, and return it.
---
> * `makeRe` Generate the `regexp` member if necessary, and return it.
122c76
< - `match(fname)` Return true if the filename matches the pattern, or
---
> * `match(fname)` Return true if the filename matches the pattern, or
124,125c78,79
< - `matchOne(fileArray, patternArray, partial)` Take a `/`-split
<   filename, and match it against a single row in the `regExpSet`. This
---
> * `matchOne(fileArray, patternArray, partial)` Take a `/`-split
>   filename, and match it against a single row in the `regExpSet`.  This
128,134d81
< - `hasMagic()` Returns true if the parsed pattern contains any
<   magic characters. Returns false if all comparator parts are
<   string literals. If the `magicalBraces` option is set on the
<   constructor, then it will consider brace expansions which are
<   not otherwise magical to be magic. If not set, then a pattern
<   like `a{b,c}d` will return `false`, because neither `abd` nor
<   `acd` contain any special glob characters.
136,143d82
<   This does **not** mean that the pattern string can be used as a
<   literal filename, as it may contain magic glob characters that
<   are escaped. For example, the pattern `\\*` or `[*]` would not
<   be considered to have magic, as the matching portion parses to
<   the literal string `'*'` and would match a path named `'*'`,
<   not `'\\*'` or `'[*]'`. The `minimatch.unescape()` method may
<   be used to remove escape characters.
< 
148c87
< Main export. Tests a path against the pattern using the options.
---
> Main export.  Tests a path against the pattern using the options.
151c90
< var isJS = minimatch(file, '*.js', { matchBase: true })
---
> var isJS = minimatch(file, "*.js", { matchBase: true })
157c96
< supplied argument, suitable for use with `Array.filter`. Example:
---
> supplied argument, suitable for use with `Array.filter`.  Example:
160c99
< var javascripts = fileList.filter(minimatch.filter('*.js', { matchBase: true }))
---
> var javascripts = fileList.filter(minimatch.filter("*.js", {matchBase: true}))
163,190d101
< ### minimatch.escape(pattern, options = {})
< 
< Escape all magic characters in a glob pattern, so that it will
< only ever match literal strings
< 
< If the `windowsPathsNoEscape` option is used, then characters are
< escaped by wrapping in `[]`, because a magic character wrapped in
< a character class can only be satisfied by that exact character.
< 
< Slashes (and backslashes in `windowsPathsNoEscape` mode) cannot
< be escaped or unescaped.
< 
< ### minimatch.unescape(pattern, options = {})
< 
< Un-escape a glob string that may contain some escaped characters.
< 
< If the `windowsPathsNoEscape` option is used, then square-brace
< escapes are removed, but not backslash escapes. For example, it
< will turn the string `'[*]'` into `*`, but it will not turn
< `'\\*'` into `'*'`, because `\` is a path separator in
< `windowsPathsNoEscape` mode.
< 
< When `windowsPathsNoEscape` is not set, then both brace escapes
< and backslash escapes are removed.
< 
< Slashes (and backslashes in `windowsPathsNoEscape` mode) cannot
< be escaped or unescaped.
< 
194c105
< files, in the style of fnmatch or glob. If nothing is matched, and
---
> files, in the style of fnmatch or glob.  If nothing is matched, and
198c109
< var javascripts = minimatch.match(fileList, '*.js', { matchBase: true })
---
> var javascripts = minimatch.match(fileList, "*.js", {matchBase: true}))
237,246d147
< ### nocaseMagicOnly
< 
< When used with `{nocase: true}`, create regular expressions that
< are case-insensitive, but leave string match portions untouched.
< Has no effect when used without `{nocase: true}`
< 
< Useful when some other form of case-insensitive matching is used,
< or if the original string representation is useful in some other
< way.
< 
250c151
< the pattern itself if this option is set. When not set, an empty list
---
> the pattern itself if this option is set.  When not set, an empty list
253,262d153
< ### magicalBraces
< 
< This only affects the results of the `Minimatch.hasMagic` method.
< 
< If the pattern contains brace expansions, such as `a{b,c}d`, but
< no other magic characters, then the `Minimatch.hasMagic()` method
< will return `false` by default. When this option set, it will
< return `true` for brace expansion as well as other magic glob
< characters.
< 
266c157
< against the basename of the path if it contains slashes. For example,
---
> against the basename of the path if it contains slashes.  For example,
285c176
< Compare a partial path to a pattern. As long as the parts of the path that
---
> Compare a partial path to a pattern.  As long as the parts of the path that
287c178
< match. This is useful in applications where you're walking through a
---
> match.  This is useful in applications where you're walking through a
294,295c185,186
< minimatch('/a/b', '/a/*/c/d', { partial: true }) // true, might be /a/b/c/d
< minimatch('/a/b', '/**/d', { partial: true }) // true, might be /a/b/.../d
---
> minimatch('/a/b', '/a/*/c/d', { partial: true })  // true, might be /a/b/c/d
> minimatch('/a/b', '/**/d', { partial: true })     // true, might be /a/b/.../d
299c190
< ### windowsPathsNoEscape
---
> ### allowWindowsEscape
301,309c192,194
< Use `\\` as a path separator _only_, and _never_ as an escape
< character. If set, all `\\` characters are replaced with `/` in
< the pattern. Note that this makes it **impossible** to match
< against paths containing literal glob pattern characters, but
< allows matching with patterns constructed using `path.join()` and
< `path.resolve()` on Windows platforms, mimicking the (buggy!)
< behavior of earlier versions on Windows. Please use with
< caution, and be mindful of [the caveat about Windows
< paths](#windows).
---
> Windows path separator `\` is by default converted to `/`, which
> prohibits the usage of `\` as a escape character. This flag skips that
> behavior and allows using the escape character.
311,397d195
< For legacy reasons, this is also set if
< `options.allowWindowsEscape` is set to the exact value `false`.
< 
< ### windowsNoMagicRoot
< 
< When a pattern starts with a UNC path or drive letter, and in
< `nocase:true` mode, do not convert the root portions of the
< pattern into a case-insensitive regular expression, and instead
< leave them as strings.
< 
< This is the default when the platform is `win32` and
< `nocase:true` is set.
< 
< ### preserveMultipleSlashes
< 
< By default, multiple `/` characters (other than the leading `//`
< in a UNC path, see "UNC Paths" above) are treated as a single
< `/`.
< 
< That is, a pattern like `a///b` will match the file path `a/b`.
< 
< Set `preserveMultipleSlashes: true` to suppress this behavior.
< 
< ### optimizationLevel
< 
< A number indicating the level of optimization that should be done
< to the pattern prior to parsing and using it for matches.
< 
< Globstar parts `**` are always converted to `*` when `noglobstar`
< is set, and multiple adjacent `**` parts are converted into a
< single `**` (ie, `a/**/**/b` will be treated as `a/**/b`, as this
< is equivalent in all cases).
< 
< - `0` - Make no further changes. In this mode, `.` and `..` are
<   maintained in the pattern, meaning that they must also appear
<   in the same position in the test path string. Eg, a pattern
<   like `a/*/../c` will match the string `a/b/../c` but not the
<   string `a/c`.
< - `1` - (default) Remove cases where a double-dot `..` follows a
<   pattern portion that is not `**`, `.`, `..`, or empty `''`. For
<   example, the pattern `./a/b/../*` is converted to `./a/*`, and
<   so it will match the path string `./a/c`, but not the path
<   string `./a/b/../c`. Dots and empty path portions in the
<   pattern are preserved.
< - `2` (or higher) - Much more aggressive optimizations, suitable
<   for use with file-walking cases:
< 
<   - Remove cases where a double-dot `..` follows a pattern
<     portion that is not `**`, `.`, or empty `''`. Remove empty
<     and `.` portions of the pattern, where safe to do so (ie,
<     anywhere other than the last position, the first position, or
<     the second position in a pattern starting with `/`, as this
<     may indicate a UNC path on Windows).
<   - Convert patterns containing `<pre>/**/../<p>/<rest>` into the
<     equivalent `<pre>/{..,**}/<p>/<rest>`, where `<p>` is a
<     a pattern portion other than `.`, `..`, `**`, or empty
<     `''`.
<   - Dedupe patterns where a `**` portion is present in one and
<     omitted in another, and it is not the final path portion, and
<     they are otherwise equivalent. So `{a/**/b,a/b}` becomes
<     `a/**/b`, because `**` matches against an empty path portion.
<   - Dedupe patterns where a `*` portion is present in one, and a
<     non-dot pattern other than `**`, `.`, `..`, or `''` is in the
<     same position in the other. So `a/{*,x}/b` becomes `a/*/b`,
<     because `*` can match against `x`.
< 
<   While these optimizations improve the performance of
<   file-walking use cases such as [glob](http://npm.im/glob) (ie,
<   the reason this module exists), there are cases where it will
<   fail to match a literal string that would have been matched in
<   optimization level 1 or 0.
< 
<   Specifically, while the `Minimatch.match()` method will
<   optimize the file path string in the same ways, resulting in
<   the same matches, it will fail when tested with the regular
<   expression provided by `Minimatch.makeRe()`, unless the path
<   string is first processed with
<   `minimatch.levelTwoFileOptimize()` or similar.
< 
< ### platform
< 
< When set to `win32`, this will trigger all windows-specific
< behaviors (special handling for UNC paths, and treating `\` as
< separators in file paths for comparison.)
< 
< Defaults to the value of `process.platform`.
< 
400,403c198,200
< While strict compliance with the existing standards is a
< worthwhile goal, some discrepancies exist between minimatch and
< other implementations. Some are intentional, and some are
< unavoidable.
---
> While strict compliance with the existing standards is a worthwhile
> goal, some discrepancies exist between minimatch and other
> implementations, and are intentional.
405c202
< If the pattern starts with a `!` character, then it is negated. Set the
---
> If the pattern starts with a `!` character, then it is negated.  Set the
407,408c204,205
< characters normally. This is perhaps relevant if you wish to start the
< pattern with a negative extglob pattern like `!(a|B)`. Multiple `!`
---
> characters normally.  This is perhaps relevant if you wish to start the
> pattern with a negative extglob pattern like `!(a|B)`.  Multiple `!`
413c210
< will not match anything. Use `\#` to match a literal `#` at the
---
> will not match anything.  Use `\#` to match a literal `#` at the
417c214
< `noglobstar` flag is set. This is supported in the manner of bsdglob
---
> `noglobstar` flag is set.  This is supported in the manner of bsdglob
419c216
< thing in a path part. That is, `a/**/b` will match `a/x/y/b`, but
---
> thing in a path part.  That is, `a/**/b` will match `a/x/y/b`, but
424c221
< interpreting the character escapes. For example,
---
> interpreting the character escapes.  For example,
426c223
< `"*a?"`. This is akin to setting the `nullglob` option in bash, except
---
> `"*a?"`.  This is akin to setting the `nullglob` option in bash, except
430c227
< other interpretation of the glob pattern. Thus, a pattern like
---
> other interpretation of the glob pattern.  Thus, a pattern like
433,454c230
< checked for validity. Since those two are valid, matching proceeds.
< 
< Negated extglob patterns are handled as closely as possible to
< Bash semantics, but there are some cases with negative extglobs
< which are exceedingly difficult to express in a JavaScript
< regular expression. In particular the negated pattern
< `<start>!(<pattern>*|)*` will in bash match anything that does
< not start with `<start><pattern>`. However,
< `<start>!(<pattern>*)*` _will_ match paths starting with
< `<start><pattern>`, because the empty string can match against
< the negated portion. In this library, `<start>!(<pattern>*|)*`
< will _not_ match any pattern starting with `<start>`, due to a
< difference in precisely which patterns are considered "greedy" in
< Regular Expressions vs bash path expansion. This may be fixable,
< but not without incurring some complexity and performance costs,
< and the trade-off seems to not be worth pursuing.
< 
< Note that `fnmatch(3)` in libc is an extremely naive string comparison
< matcher, which does not do anything special for slashes. This library is
< designed to be used in glob searching and file walkers, and so it does do
< special things with `/`. Thus, `foo*` will not match `foo/bar` in this
< library, even though it would in `fnmatch(3)`.
---
> checked for validity.  Since those two are valid, matching proceeds.
Only in npm/node_modules/minimatch: dist
Only in bun/node_modules/minimatch: minimatch.js
diff -r npm/node_modules/minimatch/package.json bun/node_modules/minimatch/package.json
5c5,8
<   "version": "9.0.5",
---
>   "version": "3.1.2",
>   "publishConfig": {
>     "tag": "v3-legacy"
>   },
10,27c13
<   "main": "./dist/commonjs/index.js",
<   "types": "./dist/commonjs/index.d.ts",
<   "exports": {
<     "./package.json": "./package.json",
<     ".": {
<       "import": {
<         "types": "./dist/esm/index.d.ts",
<         "default": "./dist/esm/index.js"
<       },
<       "require": {
<         "types": "./dist/commonjs/index.d.ts",
<         "default": "./dist/commonjs/index.js"
<       }
<     }
<   },
<   "files": [
<     "dist"
<   ],
---
>   "main": "minimatch.js",
28a15
>     "test": "tap",
31,39c18
<     "prepublishOnly": "git push origin --follow-tags",
<     "prepare": "tshy",
<     "pretest": "npm run prepare",
<     "presnap": "npm run prepare",
<     "test": "tap",
<     "snap": "tap",
<     "format": "prettier --write . --loglevel warn",
<     "benchmark": "node benchmark/index.js",
<     "typedoc": "typedoc --tsconfig tsconfig-esm.json ./src/*.ts"
---
>     "postpublish": "git push origin --all; git push origin --tags"
41,51d19
<   "prettier": {
<     "semi": false,
<     "printWidth": 80,
<     "tabWidth": 2,
<     "useTabs": false,
<     "singleQuote": true,
<     "jsxSingleQuote": false,
<     "bracketSameLine": true,
<     "arrowParens": "avoid",
<     "endOfLine": "lf"
<   },
53c21
<     "node": ">=16 || 14 >=14.17"
---
>     "node": "*"
56c24
<     "brace-expansion": "^2.0.1"
---
>     "brace-expansion": "^1.1.7"
59,69c27
<     "@types/brace-expansion": "^1.1.0",
<     "@types/node": "^18.15.11",
<     "@types/tap": "^15.0.8",
<     "eslint-config-prettier": "^8.6.0",
<     "mkdirp": "1",
<     "prettier": "^2.8.2",
<     "tap": "^18.7.2",
<     "ts-node": "^10.9.1",
<     "tshy": "^1.12.0",
<     "typedoc": "^0.23.21",
<     "typescript": "^4.9.3"
---
>     "tap": "^15.1.6"
71,73d28
<   "funding": {
<     "url": "https://github.com/sponsors/isaacs"
<   },
75,81c30,32
<   "tshy": {
<     "exports": {
<       "./package.json": "./package.json",
<       ".": "./src/index.ts"
<     }
<   },
<   "type": "module"
---
>   "files": [
>     "minimatch.js"
>   ]
Only in bun/node_modules/orval/node_modules/ajv: node_modules
Only in npm/node_modules/orval/node_modules: json-schema-traverse
Only in npm/node_modules/picomatch: CHANGELOG.md
diff -r npm/node_modules/picomatch/README.md bun/node_modules/picomatch/README.md
110c110
< ### [picomatch](lib/picomatch.js#L32)
---
> ### [picomatch](lib/picomatch.js#L31)
131c131
< ### [.test](lib/picomatch.js#L117)
---
> **Example without node.js**
132a133,149
> For environments without `node.js`, `picomatch/posix` provides you a dependency-free matcher, without automatic OS detection.
> 
> ```js
> const picomatch = require('picomatch/posix');
> // the same API, defaulting to posix paths
> const isMatch = picomatch('a/*');
> console.log(isMatch('a\\b')); //=> false
> console.log(isMatch('a/b')); //=> true
> 
> // you can still configure the matcher function to accept windows paths
> const isMatch = picomatch('a/*', { options: windows });
> console.log(isMatch('a\\b')); //=> true
> console.log(isMatch('a/b')); //=> true
> ```
> 
> ### [.test](lib/picomatch.js#L116)
> 
151c168
< ### [.matchBase](lib/picomatch.js#L161)
---
> ### [.matchBase](lib/picomatch.js#L160)
169c186
< ### [.isMatch](lib/picomatch.js#L183)
---
> ### [.isMatch](lib/picomatch.js#L182)
190c207
< ### [.parse](lib/picomatch.js#L199)
---
> ### [.parse](lib/picomatch.js#L198)
207c224
< ### [.scan](lib/picomatch.js#L231)
---
> ### [.scan](lib/picomatch.js#L230)
238c255
< ### [.compileRe](lib/picomatch.js#L245)
---
> ### [.compileRe](lib/picomatch.js#L244)
251c268
< ### [.makeRe](lib/picomatch.js#L286)
---
> ### [.makeRe](lib/picomatch.js#L285)
274c291
< ### [.toRegex](lib/picomatch.js#L321)
---
> ### [.toRegex](lib/picomatch.js#L320)
341a359
> | `windows`             | `boolean`      | `false`     | Also accept backslashes as the path separator. |
343,344d360
< picomatch has automatic detection for regex positive and negative lookbehinds. If the pattern contains a negative lookbehind, you must be using Node.js >= 8.10 or else picomatch will throw an error.
< 
487c503
< | `**` | Matches any character zero or more times, including path separators. Note that `**` will only match path separators (`/`, and `\\` on Windows) when they are the only characters in a path segment. Thus, `foo**/bar` is equivalent to `foo*/bar`, and `foo/a**b/bar` is equivalent to `foo/a*b/bar`, and _more than two_ consecutive stars in a glob path segment are regarded as _a single star_. Thus, `foo/***/bar` is equivalent to `foo/*/bar`. |
---
> | `**` | Matches any character zero or more times, including path separators. Note that `**` will only match path separators (`/`, and `\\` with the `windows` option) when they are the only characters in a path segment. Thus, `foo**/bar` is equivalent to `foo*/bar`, and `foo/a**b/bar` is equivalent to `foo/a*b/bar`, and _more than two_ consecutive stars in a glob path segment are regarded as _a single star_. Thus, `foo/***/bar` is equivalent to `foo/*/bar`. |
527,529c543,545
< console.log(pm.isMatch('a', 'a*(z)')); // true
< console.log(pm.isMatch('az', 'a*(z)')); // true
< console.log(pm.isMatch('azzz', 'a*(z)')); // true
---
> console.log(pm.isMatch('a', 'a+(z)')); // false
> console.log(pm.isMatch('az', 'a+(z)')); // true
> console.log(pm.isMatch('azzz', 'a+(z)')); // true
615a632,633
> _(Pay special attention to the last three benchmarks. Minimatch freezes on long ranges.)_
> 
617,619c635,637
< # .makeRe star
<   picomatch x 1,993,050 ops/sec ±0.51% (91 runs sampled)
<   minimatch x 627,206 ops/sec ±1.96% (87 runs sampled))
---
> # .makeRe star (*)
>   picomatch x 4,449,159 ops/sec ±0.24% (97 runs sampled)
>   minimatch x 632,772 ops/sec ±0.14% (98 runs sampled)
621,623c639,641
< # .makeRe star; dot=true
<   picomatch x 1,436,640 ops/sec ±0.62% (91 runs sampled)
<   minimatch x 525,876 ops/sec ±0.60% (88 runs sampled)
---
> # .makeRe star; dot=true (*)
>   picomatch x 3,500,079 ops/sec ±0.26% (99 runs sampled)
>   minimatch x 564,916 ops/sec ±0.23% (96 runs sampled)
625,627c643,645
< # .makeRe globstar
<   picomatch x 1,592,742 ops/sec ±0.42% (90 runs sampled)
<   minimatch x 962,043 ops/sec ±1.76% (91 runs sampled)d)
---
> # .makeRe globstar (**)
>   picomatch x 3,261,000 ops/sec ±0.27% (98 runs sampled)
>   minimatch x 1,664,766 ops/sec ±0.20% (100 runs sampled)
629,631c647,649
< # .makeRe globstars
<   picomatch x 1,615,199 ops/sec ±0.35% (94 runs sampled)
<   minimatch x 477,179 ops/sec ±1.33% (91 runs sampled)
---
> # .makeRe globstars (**/**/**)
>   picomatch x 3,284,469 ops/sec ±0.18% (97 runs sampled)
>   minimatch x 1,435,880 ops/sec ±0.34% (95 runs sampled)
633,635c651,653
< # .makeRe with leading star
<   picomatch x 1,220,856 ops/sec ±0.40% (92 runs sampled)
<   minimatch x 453,564 ops/sec ±1.43% (94 runs sampled)
---
> # .makeRe with leading star (*.txt)
>   picomatch x 3,100,197 ops/sec ±0.35% (99 runs sampled)
>   minimatch x 428,347 ops/sec ±0.42% (94 runs sampled)
637,639c655,669
< # .makeRe - basic braces
<   picomatch x 392,067 ops/sec ±0.70% (90 runs sampled)
<   minimatch x 99,532 ops/sec ±2.03% (87 runs sampled))
---
> # .makeRe - basic braces ({a,b,c}*.txt)
>   picomatch x 443,578 ops/sec ±1.33% (89 runs sampled)
>   minimatch x 107,143 ops/sec ±0.35% (94 runs sampled)
> 
> # .makeRe - short ranges ({a..z}*.txt)
>   picomatch x 415,484 ops/sec ±0.76% (96 runs sampled)
>   minimatch x 14,299 ops/sec ±0.26% (96 runs sampled)
> 
> # .makeRe - medium ranges ({1..100000}*.txt)
>   picomatch x 395,020 ops/sec ±0.87% (89 runs sampled)
>   minimatch x 2 ops/sec ±4.59% (10 runs sampled)
> 
> # .makeRe - long ranges ({1..10000000}*.txt)
>   picomatch x 400,036 ops/sec ±0.83% (90 runs sampled)
>   minimatch (FATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory)
diff -r npm/node_modules/picomatch/index.js bun/node_modules/picomatch/index.js
3c3,17
< module.exports = require('./lib/picomatch');
---
> const pico = require('./lib/picomatch');
> const utils = require('./lib/utils');
> 
> function picomatch(glob, options, returnState = false) {
>   // default to os.platform()
>   if (options && (options.windows === null || options.windows === undefined)) {
>     // don't mutate the original options object
>     options = { ...options, windows: utils.isWindows() };
>   }
> 
>   return pico(glob, options, returnState);
> }
> 
> Object.assign(picomatch, pico);
> module.exports = picomatch;
diff -r npm/node_modules/picomatch/lib/constants.js bun/node_modules/picomatch/lib/constants.js
3d2
< const path = require('path');
25a25
> const SEP = '/';
42c42,43
<   START_ANCHOR
---
>   START_ANCHOR,
>   SEP
62c63,64
<   END_ANCHOR: `(?:[${WIN_SLASH}]|$)`
---
>   END_ANCHOR: `(?:[${WIN_SLASH}]|$)`,
>   SEP: '\\'
155,156d156
< 
<   SEP: path.sep,
diff -r npm/node_modules/picomatch/lib/parse.js bun/node_modules/picomatch/lib/parse.js
74d73
<   const win32 = utils.isWindows(options);
77c76
<   const PLATFORM_CHARS = constants.globChars(win32);
---
>   const PLATFORM_CHARS = constants.globChars(opts.windows);
212a212
>       prev.output = (prev.output || prev.value) + tok.value;
214d213
<       prev.output = (prev.output || '') + tok.value;
702,705d700
<         if (next === '<' && !utils.supportsLookbehinds()) {
<           throw new Error('Node.js v10 or higher is required for regex lookbehinds');
<         }
< 
1013d1007
<   const win32 = utils.isWindows(options);
1026c1020
<   } = constants.globChars(win32);
---
>   } = constants.globChars(opts.windows);
diff -r npm/node_modules/picomatch/lib/picomatch.js bun/node_modules/picomatch/lib/picomatch.js
3d2
< const path = require('path');
52c51
<   const posix = utils.isWindows(options);
---
>   const posix = opts.windows;
161c160
< picomatch.matchBase = (input, glob, options, posix = utils.isWindows(options)) => {
---
> picomatch.matchBase = (input, glob, options) => {
163c162
<   return regex.test(path.basename(input));
---
>   return regex.test(utils.basename(input));
diff -r npm/node_modules/picomatch/lib/utils.js bun/node_modules/picomatch/lib/utils.js
0a1
> /*global navigator*/
3,4d3
< const path = require('path');
< const win32 = process.platform === 'win32';
18,22c17,21
< exports.removeBackslashes = str => {
<   return str.replace(REGEX_REMOVE_BACKSLASH, match => {
<     return match === '\\' ? '' : match;
<   });
< };
---
> exports.isWindows = () => {
>   if (typeof navigator !== 'undefined' && navigator.platform) {
>     const platform = navigator.platform.toLowerCase();
>     return platform === 'win32' || platform === 'windows';
>   }
24,27c23,24
< exports.supportsLookbehinds = () => {
<   const segs = process.version.slice(1).split('.').map(Number);
<   if (segs.length === 3 && segs[0] >= 9 || (segs[0] === 8 && segs[1] >= 10)) {
<     return true;
---
>   if (typeof process !== 'undefined' && process.platform) {
>     return process.platform === 'win32';
28a26
> 
32,36c30,33
< exports.isWindows = options => {
<   if (options && typeof options.windows === 'boolean') {
<     return options.windows;
<   }
<   return win32 === true || path.sep === '\\';
---
> exports.removeBackslashes = str => {
>   return str.replace(REGEX_REMOVE_BACKSLASH, match => {
>     return match === '\\' ? '' : match;
>   });
63a61,71
> };
> 
> exports.basename = (path, { windows } = {}) => {
>   const segs = path.split(windows ? /[\\/]/ : '/');
>   const last = segs[segs.length - 1];
> 
>   if (last === '') {
>     return segs[segs.length - 2];
>   }
> 
>   return last;
diff -r npm/node_modules/picomatch/package.json bun/node_modules/picomatch/package.json
4c4
<   "version": "2.3.1",
---
>   "version": "4.0.2",
14a15
>     "posix.js",
16a18
>   "sideEffects": false,
19c21
<     "node": ">=8.6"
---
>     "node": ">=12"
29c31
<     "eslint": "^6.8.0",
---
>     "eslint": "^8.57.0",
32,33c34,35
<     "mocha": "^6.2.2",
<     "nyc": "^15.0.0",
---
>     "mocha": "^10.4.0",
>     "nyc": "^15.1.0",
Only in bun/node_modules/picomatch: posix.js
Only in npm/node_modules/tinyglobby: node_modules
Only in bun/node_modules/typedoc: node_modules
Only in npm/node_modules/vite: node_modules
