Binary files npm/node_modules/.bin/esbuild and bun/node_modules/.bin/esbuild differ
Only in npm/node_modules: .cache
Only in npm/node_modules: .package-lock.json
Only in bun/node_modules/@apidevtools/swagger-parser/node_modules/ajv: node_modules
Only in npm/node_modules/@apidevtools/swagger-parser/node_modules: ajv-draft-04
Only in npm/node_modules/@apidevtools/swagger-parser/node_modules: json-schema-traverse
Only in bun/node_modules/@babel/traverse: node_modules
Binary files npm/node_modules/@esbuild/darwin-arm64/bin/esbuild and bun/node_modules/@esbuild/darwin-arm64/bin/esbuild differ
diff -r npm/node_modules/@esbuild/darwin-arm64/package.json bun/node_modules/@esbuild/darwin-arm64/package.json
3c3
<   "version": "0.25.5",
---
>   "version": "0.21.5",
12c12
<     "node": ">=18"
---
>     "node": ">=12"
Only in npm/node_modules/@eslint/eslintrc: node_modules
Only in npm/node_modules/@humanwhocodes/config-array: node_modules
Only in bun/node_modules/@ibm-cloud/openapi-ruleset/node_modules/minimatch: node_modules
Only in bun/node_modules/@orval/core/node_modules: .bin
Only in bun/node_modules/@orval/core/node_modules/ajv: node_modules
Only in bun/node_modules/@orval/core/node_modules: esbuild
Only in npm/node_modules/@orval/core/node_modules: json-schema-traverse
Only in bun/node_modules/@stoplight: better-ajv-errors
Only in npm/node_modules/@stoplight/spectral-core/node_modules/@stoplight: better-ajv-errors
Only in bun/node_modules/@stoplight/spectral-core/node_modules/ajv: node_modules
Only in npm/node_modules/@stoplight/spectral-core/node_modules: ajv-errors
Only in npm/node_modules/@stoplight/spectral-core/node_modules: brace-expansion
Only in npm/node_modules/@stoplight/spectral-core/node_modules: json-schema-traverse
Only in npm/node_modules/@stoplight/spectral-core/node_modules: minimatch
Only in npm/node_modules/@stoplight/spectral-functions/node_modules: @stoplight
Only in bun/node_modules/@stoplight/spectral-functions/node_modules/ajv: node_modules
Only in npm/node_modules/@stoplight/spectral-functions/node_modules: ajv-draft-04
Only in npm/node_modules/@stoplight/spectral-functions/node_modules: ajv-errors
Only in npm/node_modules/@stoplight/spectral-functions/node_modules: json-schema-traverse
Only in npm/node_modules/@stoplight/spectral-rulesets/node_modules: @stoplight
Only in bun/node_modules/@typescript-eslint/typescript-estree: node_modules
Only in bun/node_modules: ajv-draft-04
Only in bun/node_modules: ajv-errors
Only in bun/node_modules/ajv-formats/node_modules/ajv: node_modules
Only in npm/node_modules/ajv-formats/node_modules: json-schema-traverse
Only in npm/node_modules/brace-expansion: .github
diff -r npm/node_modules/brace-expansion/README.md bun/node_modules/brace-expansion/README.md
107,112d106
< ## Security contact information
< 
< To report a security vulnerability, please use the
< [Tidelift security contact](https://tidelift.com/security).
< Tidelift will coordinate the fix and disclosure.
< 
diff -r npm/node_modules/brace-expansion/index.js bun/node_modules/brace-expansion/index.js
0a1
> var concatMap = require('concat-map');
80a82,85
> function identity(e) {
>   return e;
> }
> 
99c104
<   if (!m) return [str];
---
>   if (!m || /\$$/.test(m.pre)) return [str];
100a106,140
>   var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
>   var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
>   var isSequence = isNumericSequence || isAlphaSequence;
>   var isOptions = m.body.indexOf(',') >= 0;
>   if (!isSequence && !isOptions) {
>     // {a},b}
>     if (m.post.match(/,.*\}/)) {
>       str = m.pre + '{' + m.body + escClose + m.post;
>       return expand(str);
>     }
>     return [str];
>   }
> 
>   var n;
>   if (isSequence) {
>     n = m.body.split(/\.\./);
>   } else {
>     n = parseCommaParts(m.body);
>     if (n.length === 1) {
>       // x{{a,b}}y ==> x{a}y x{b}y
>       n = expand(n[0], false).map(embrace);
>       if (n.length === 1) {
>         var post = m.post.length
>           ? expand(m.post, false)
>           : [''];
>         return post.map(function(p) {
>           return m.pre + n[0] + p;
>         });
>       }
>     }
>   }
> 
>   // at this point, n is the parts, and we know it's not a comma set
>   // with a single entry.
> 
107,124c147
<   if (/\$$/.test(m.pre)) {    
<     for (var k = 0; k < post.length; k++) {
<       var expansion = pre+ '{' + m.body + '}' + post[k];
<       expansions.push(expansion);
<     }
<   } else {
<     var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
<     var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
<     var isSequence = isNumericSequence || isAlphaSequence;
<     var isOptions = m.body.indexOf(',') >= 0;
<     if (!isSequence && !isOptions) {
<       // {a},b}
<       if (m.post.match(/,.*\}/)) {
<         str = m.pre + '{' + m.body + escClose + m.post;
<         return expand(str);
<       }
<       return [str];
<     }
---
>   var N;
126,139c149,160
<     var n;
<     if (isSequence) {
<       n = m.body.split(/\.\./);
<     } else {
<       n = parseCommaParts(m.body);
<       if (n.length === 1) {
<         // x{{a,b}}y ==> x{a}y x{b}y
<         n = expand(n[0], false).map(embrace);
<         if (n.length === 1) {
<           return post.map(function(p) {
<             return m.pre + n[0] + p;
<           });
<         }
<       }
---
>   if (isSequence) {
>     var x = numeric(n[0]);
>     var y = numeric(n[1]);
>     var width = Math.max(n[0].length, n[1].length)
>     var incr = n.length == 3
>       ? Math.abs(numeric(n[2]))
>       : 1;
>     var test = lte;
>     var reverse = y < x;
>     if (reverse) {
>       incr *= -1;
>       test = gte;
140a162
>     var pad = n.some(isPadded);
142,144c164
<     // at this point, n is the parts, and we know it's not a comma set
<     // with a single entry.
<     var N;
---
>     N = [];
146,179c166,181
<     if (isSequence) {
<       var x = numeric(n[0]);
<       var y = numeric(n[1]);
<       var width = Math.max(n[0].length, n[1].length)
<       var incr = n.length == 3
<         ? Math.abs(numeric(n[2]))
<         : 1;
<       var test = lte;
<       var reverse = y < x;
<       if (reverse) {
<         incr *= -1;
<         test = gte;
<       }
<       var pad = n.some(isPadded);
< 
<       N = [];
< 
<       for (var i = x; test(i, y); i += incr) {
<         var c;
<         if (isAlphaSequence) {
<           c = String.fromCharCode(i);
<           if (c === '\\')
<             c = '';
<         } else {
<           c = String(i);
<           if (pad) {
<             var need = width - c.length;
<             if (need > 0) {
<               var z = new Array(need + 1).join('0');
<               if (i < 0)
<                 c = '-' + z + c.slice(1);
<               else
<                 c = z + c;
<             }
---
>     for (var i = x; test(i, y); i += incr) {
>       var c;
>       if (isAlphaSequence) {
>         c = String.fromCharCode(i);
>         if (c === '\\')
>           c = '';
>       } else {
>         c = String(i);
>         if (pad) {
>           var need = width - c.length;
>           if (need > 0) {
>             var z = new Array(need + 1).join('0');
>             if (i < 0)
>               c = '-' + z + c.slice(1);
>             else
>               c = z + c;
182d183
<         N.push(c);
184,189c185
<     } else {
<       N = [];
< 
<       for (var j = 0; j < n.length; j++) {
<         N.push.apply(N, expand(n[j], false));
<       }
---
>       N.push(c);
190a187,189
>   } else {
>     N = concatMap(n, function(el) { return expand(el, false) });
>   }
192,197c191,195
<     for (var j = 0; j < N.length; j++) {
<       for (var k = 0; k < post.length; k++) {
<         var expansion = pre + N[j] + post[k];
<         if (!isTop || isSequence || expansion)
<           expansions.push(expansion);
<       }
---
>   for (var j = 0; j < N.length; j++) {
>     for (var k = 0; k < post.length; k++) {
>       var expansion = pre + N[j] + post[k];
>       if (!isTop || isSequence || expansion)
>         expansions.push(expansion);
diff -r npm/node_modules/brace-expansion/package.json bun/node_modules/brace-expansion/package.json
4c4
<   "version": "2.0.1",
---
>   "version": "1.1.11",
17c17,18
<     "balanced-match": "^1.0.0"
---
>     "balanced-match": "^1.0.0",
>     "concat-map": "0.0.1"
20c21
<     "@c4312/matcha": "^1.3.1",
---
>     "matcha": "^0.7.0",
Binary files npm/node_modules/esbuild/bin/esbuild and bun/node_modules/esbuild/bin/esbuild differ
diff -r npm/node_modules/esbuild/install.js bun/node_modules/esbuild/install.js
52d51
<   "netbsd arm64 LE": "@esbuild/netbsd-arm64",
54d52
<   "openbsd arm64 LE": "@esbuild/openbsd-arm64",
diff -r npm/node_modules/esbuild/lib/main.d.ts bun/node_modules/esbuild/lib/main.d.ts
128c128
<   packages?: 'bundle' | 'external'
---
>   packages?: 'external'
244d243
<   cors?: CORSOptions
248,252d246
< /** Documentation: https://esbuild.github.io/api/#cors */
< export interface CORSOptions {
<   origin?: string | string[]
< }
< 
265c259
<   hosts: string[]
---
>   host: string
diff -r npm/node_modules/esbuild/lib/main.js bun/node_modules/esbuild/lib/main.js
221,228c221,224
< function validateAndJoinStringArray(values, what) {
<   const toJoin = [];
<   for (const value of values) {
<     validateStringValue(value, what);
<     if (value.indexOf(",") >= 0) throw new Error(`Invalid ${what}: ${value}`);
<     toJoin.push(value);
<   }
<   return toJoin.join(",");
---
> function validateTarget(target) {
>   validateStringValue(target, "target");
>   if (target.indexOf(",") >= 0) throw new Error(`Invalid target: ${target}`);
>   return target;
235d230
< var mustBeValidPortNumber = (value) => typeof value === "number" && value === (value | 0) && value >= 0 && value <= 65535 ? null : "a valid port number";
238d232
< var mustBeArrayOfStrings = (value) => Array.isArray(value) && value.every((x) => typeof x === "string") ? null : "an array of strings";
245c239
< var mustBeStringOrArrayOfStrings = (value) => typeof value === "string" || Array.isArray(value) && value.every((x) => typeof x === "string") ? null : "a string or an array of strings";
---
> var mustBeStringOrArray = (value) => typeof value === "string" || Array.isArray(value) ? null : "a string or an array";
309c303
<   let target = getFlag(options, keys, "target", mustBeStringOrArrayOfStrings);
---
>   let target = getFlag(options, keys, "target", mustBeStringOrArray);
320,321c314,315
<   let drop = getFlag(options, keys, "drop", mustBeArrayOfStrings);
<   let dropLabels = getFlag(options, keys, "dropLabels", mustBeArrayOfStrings);
---
>   let drop = getFlag(options, keys, "drop", mustBeArray);
>   let dropLabels = getFlag(options, keys, "dropLabels", mustBeArray);
334c328
<   let pure = getFlag(options, keys, "pure", mustBeArrayOfStrings);
---
>   let pure = getFlag(options, keys, "pure", mustBeArray);
341c335,338
<   if (target) flags.push(`--target=${validateAndJoinStringArray(Array.isArray(target) ? target : [target], "target")}`);
---
>   if (target) {
>     if (Array.isArray(target)) flags.push(`--target=${Array.from(target).map(validateTarget).join(",")}`);
>     else flags.push(`--target=${validateTarget(target)}`);
>   }
355,357c352,354
<   if (dropLabels) flags.push(`--drop-labels=${validateAndJoinStringArray(dropLabels, "drop label")}`);
<   if (mangleProps) flags.push(`--mangle-props=${jsRegExpToGoRegExp(mangleProps)}`);
<   if (reserveProps) flags.push(`--reserve-props=${jsRegExpToGoRegExp(reserveProps)}`);
---
>   if (dropLabels) flags.push(`--drop-labels=${Array.from(dropLabels).map((what) => validateStringValue(what, "dropLabels")).join(",")}`);
>   if (mangleProps) flags.push(`--mangle-props=${mangleProps.source}`);
>   if (reserveProps) flags.push(`--reserve-props=${reserveProps.source}`);
406,410c403,407
<   let resolveExtensions = getFlag(options, keys, "resolveExtensions", mustBeArrayOfStrings);
<   let nodePathsInput = getFlag(options, keys, "nodePaths", mustBeArrayOfStrings);
<   let mainFields = getFlag(options, keys, "mainFields", mustBeArrayOfStrings);
<   let conditions = getFlag(options, keys, "conditions", mustBeArrayOfStrings);
<   let external = getFlag(options, keys, "external", mustBeArrayOfStrings);
---
>   let resolveExtensions = getFlag(options, keys, "resolveExtensions", mustBeArray);
>   let nodePathsInput = getFlag(options, keys, "nodePaths", mustBeArray);
>   let mainFields = getFlag(options, keys, "mainFields", mustBeArray);
>   let conditions = getFlag(options, keys, "conditions", mustBeArray);
>   let external = getFlag(options, keys, "external", mustBeArray);
419c416
<   let inject = getFlag(options, keys, "inject", mustBeArrayOfStrings);
---
>   let inject = getFlag(options, keys, "inject", mustBeArray);
441c438,446
<   if (resolveExtensions) flags.push(`--resolve-extensions=${validateAndJoinStringArray(resolveExtensions, "resolve extension")}`);
---
>   if (resolveExtensions) {
>     let values = [];
>     for (let value of resolveExtensions) {
>       validateStringValue(value, "resolve extension");
>       if (value.indexOf(",") >= 0) throw new Error(`Invalid resolve extension: ${value}`);
>       values.push(value);
>     }
>     flags.push(`--resolve-extensions=${values.join(",")}`);
>   }
446,447c451,468
<   if (mainFields) flags.push(`--main-fields=${validateAndJoinStringArray(mainFields, "main field")}`);
<   if (conditions) flags.push(`--conditions=${validateAndJoinStringArray(conditions, "condition")}`);
---
>   if (mainFields) {
>     let values = [];
>     for (let value of mainFields) {
>       validateStringValue(value, "main field");
>       if (value.indexOf(",") >= 0) throw new Error(`Invalid main field: ${value}`);
>       values.push(value);
>     }
>     flags.push(`--main-fields=${values.join(",")}`);
>   }
>   if (conditions) {
>     let values = [];
>     for (let value of conditions) {
>       validateStringValue(value, "condition");
>       if (value.indexOf(",") >= 0) throw new Error(`Invalid condition: ${value}`);
>       values.push(value);
>     }
>     flags.push(`--conditions=${values.join(",")}`);
>   }
644,645c665,666
<       if (binaryVersion !== "0.25.5") {
<         throw new Error(`Cannot start service: Host version "${"0.25.5"}" does not match binary version ${quote(binaryVersion)}`);
---
>       if (binaryVersion !== "0.21.5") {
>         throw new Error(`Cannot start service: Host version "${"0.21.5"}" does not match binary version ${quote(binaryVersion)}`);
1000c1021
<           const port = getFlag(options2, keys, "port", mustBeValidPortNumber);
---
>           const port = getFlag(options2, keys, "port", mustBeInteger);
1006d1026
<           const cors = getFlag(options2, keys, "cors", mustBeObject);
1020,1026d1039
<           if (cors) {
<             const corsKeys = {};
<             const origin = getFlag(cors, corsKeys, "origin", mustBeStringOrArrayOfStrings);
<             checkForInvalidFlags(cors, corsKeys, `on "cors" object`);
<             if (Array.isArray(origin)) request2.corsOrigin = origin;
<             else if (origin !== void 0) request2.corsOrigin = [origin];
<           }
1162c1175
<           plugin.onResolve.push({ id, filter: jsRegExpToGoRegExp(filter), namespace: namespace || "" });
---
>           plugin.onResolve.push({ id, filter: filter.source, namespace: namespace || "" });
1174c1187
<           plugin.onLoad.push({ id, filter: jsRegExpToGoRegExp(filter), namespace: namespace || "" });
---
>           plugin.onLoad.push({ id, filter: filter.source, namespace: namespace || "" });
1188d1200
<     details.clear();
1234,1235c1246,1247
<           let watchFiles = getFlag(result, keys, "watchFiles", mustBeArrayOfStrings);
<           let watchDirs = getFlag(result, keys, "watchDirs", mustBeArrayOfStrings);
---
>           let watchFiles = getFlag(result, keys, "watchFiles", mustBeArray);
>           let watchDirs = getFlag(result, keys, "watchDirs", mustBeArray);
1280,1281c1292,1293
<           let watchFiles = getFlag(result, keys, "watchFiles", mustBeArrayOfStrings);
<           let watchDirs = getFlag(result, keys, "watchDirs", mustBeArrayOfStrings);
---
>           let watchFiles = getFlag(result, keys, "watchFiles", mustBeArray);
>           let watchDirs = getFlag(result, keys, "watchDirs", mustBeArray);
1362,1364d1373
<     clear() {
<       map.clear();
<     },
1585,1589d1593
< function jsRegExpToGoRegExp(regexp) {
<   let result = regexp.source;
<   if (regexp.flags) result = `(?${regexp.flags})${result}`;
<   return result;
< }
1620d1623
<   "netbsd arm64 LE": "@esbuild/netbsd-arm64",
1622d1624
<   "openbsd arm64 LE": "@esbuild/openbsd-arm64",
1768c1770
<         `pnpapi-${pkg.replace("/", "-")}-${"0.25.5"}-${path.basename(subpath)}`
---
>         `pnpapi-${pkg.replace("/", "-")}-${"0.21.5"}-${path.basename(subpath)}`
1803c1805
< var isInternalWorkerThread = ((_a = worker_threads == null ? void 0 : worker_threads.workerData) == null ? void 0 : _a.esbuildVersion) === "0.25.5";
---
> var isInternalWorkerThread = ((_a = worker_threads == null ? void 0 : worker_threads.workerData) == null ? void 0 : _a.esbuildVersion) === "0.21.5";
1870c1872
< var version = "0.25.5";
---
> var version = "0.21.5";
1973c1975
<   let child = child_process.spawn(command, args.concat(`--service=${"0.25.5"}`, "--ping"), {
---
>   let child = child_process.spawn(command, args.concat(`--service=${"0.21.5"}`, "--ping"), {
2077c2079
<   let stdout = child_process.execFileSync(command, args.concat(`--service=${"0.25.5"}`), {
---
>   let stdout = child_process.execFileSync(command, args.concat(`--service=${"0.21.5"}`), {
2097c2099
<     workerData: { workerPort, defaultWD, esbuildVersion: "0.25.5" },
---
>     workerData: { workerPort, defaultWD, esbuildVersion: "0.21.5" },
diff -r npm/node_modules/esbuild/package.json bun/node_modules/esbuild/package.json
3c3
<   "version": "0.25.5",
---
>   "version": "0.21.5",
15c15
<     "node": ">=18"
---
>     "node": ">=12"
21,45c21,43
<     "@esbuild/aix-ppc64": "0.25.5",
<     "@esbuild/android-arm": "0.25.5",
<     "@esbuild/android-arm64": "0.25.5",
<     "@esbuild/android-x64": "0.25.5",
<     "@esbuild/darwin-arm64": "0.25.5",
<     "@esbuild/darwin-x64": "0.25.5",
<     "@esbuild/freebsd-arm64": "0.25.5",
<     "@esbuild/freebsd-x64": "0.25.5",
<     "@esbuild/linux-arm": "0.25.5",
<     "@esbuild/linux-arm64": "0.25.5",
<     "@esbuild/linux-ia32": "0.25.5",
<     "@esbuild/linux-loong64": "0.25.5",
<     "@esbuild/linux-mips64el": "0.25.5",
<     "@esbuild/linux-ppc64": "0.25.5",
<     "@esbuild/linux-riscv64": "0.25.5",
<     "@esbuild/linux-s390x": "0.25.5",
<     "@esbuild/linux-x64": "0.25.5",
<     "@esbuild/netbsd-arm64": "0.25.5",
<     "@esbuild/netbsd-x64": "0.25.5",
<     "@esbuild/openbsd-arm64": "0.25.5",
<     "@esbuild/openbsd-x64": "0.25.5",
<     "@esbuild/sunos-x64": "0.25.5",
<     "@esbuild/win32-arm64": "0.25.5",
<     "@esbuild/win32-ia32": "0.25.5",
<     "@esbuild/win32-x64": "0.25.5"
---
>     "@esbuild/aix-ppc64": "0.21.5",
>     "@esbuild/android-arm": "0.21.5",
>     "@esbuild/android-arm64": "0.21.5",
>     "@esbuild/android-x64": "0.21.5",
>     "@esbuild/darwin-arm64": "0.21.5",
>     "@esbuild/darwin-x64": "0.21.5",
>     "@esbuild/freebsd-arm64": "0.21.5",
>     "@esbuild/freebsd-x64": "0.21.5",
>     "@esbuild/linux-arm": "0.21.5",
>     "@esbuild/linux-arm64": "0.21.5",
>     "@esbuild/linux-ia32": "0.21.5",
>     "@esbuild/linux-loong64": "0.21.5",
>     "@esbuild/linux-mips64el": "0.21.5",
>     "@esbuild/linux-ppc64": "0.21.5",
>     "@esbuild/linux-riscv64": "0.21.5",
>     "@esbuild/linux-s390x": "0.21.5",
>     "@esbuild/linux-x64": "0.21.5",
>     "@esbuild/netbsd-x64": "0.21.5",
>     "@esbuild/openbsd-x64": "0.21.5",
>     "@esbuild/sunos-x64": "0.21.5",
>     "@esbuild/win32-arm64": "0.21.5",
>     "@esbuild/win32-ia32": "0.21.5",
>     "@esbuild/win32-x64": "0.21.5"
Only in npm/node_modules/eslint: node_modules
Only in npm/node_modules/glob: node_modules
diff -r npm/node_modules/globals/globals.json bun/node_modules/globals/globals.json
2a3
> 		"AggregateError": false,
20a22
> 		"FinalizationRegistry": false,
64a67
> 		"WeakRef": false,
226a230,362
> 	"es2020": {
> 		"Array": false,
> 		"ArrayBuffer": false,
> 		"Atomics": false,
> 		"BigInt": false,
> 		"BigInt64Array": false,
> 		"BigUint64Array": false,
> 		"Boolean": false,
> 		"constructor": false,
> 		"DataView": false,
> 		"Date": false,
> 		"decodeURI": false,
> 		"decodeURIComponent": false,
> 		"encodeURI": false,
> 		"encodeURIComponent": false,
> 		"Error": false,
> 		"escape": false,
> 		"eval": false,
> 		"EvalError": false,
> 		"Float32Array": false,
> 		"Float64Array": false,
> 		"Function": false,
> 		"globalThis": false,
> 		"hasOwnProperty": false,
> 		"Infinity": false,
> 		"Int16Array": false,
> 		"Int32Array": false,
> 		"Int8Array": false,
> 		"isFinite": false,
> 		"isNaN": false,
> 		"isPrototypeOf": false,
> 		"JSON": false,
> 		"Map": false,
> 		"Math": false,
> 		"NaN": false,
> 		"Number": false,
> 		"Object": false,
> 		"parseFloat": false,
> 		"parseInt": false,
> 		"Promise": false,
> 		"propertyIsEnumerable": false,
> 		"Proxy": false,
> 		"RangeError": false,
> 		"ReferenceError": false,
> 		"Reflect": false,
> 		"RegExp": false,
> 		"Set": false,
> 		"SharedArrayBuffer": false,
> 		"String": false,
> 		"Symbol": false,
> 		"SyntaxError": false,
> 		"toLocaleString": false,
> 		"toString": false,
> 		"TypeError": false,
> 		"Uint16Array": false,
> 		"Uint32Array": false,
> 		"Uint8Array": false,
> 		"Uint8ClampedArray": false,
> 		"undefined": false,
> 		"unescape": false,
> 		"URIError": false,
> 		"valueOf": false,
> 		"WeakMap": false,
> 		"WeakSet": false
> 	},
> 	"es2021": {
> 		"AggregateError": false,
> 		"Array": false,
> 		"ArrayBuffer": false,
> 		"Atomics": false,
> 		"BigInt": false,
> 		"BigInt64Array": false,
> 		"BigUint64Array": false,
> 		"Boolean": false,
> 		"constructor": false,
> 		"DataView": false,
> 		"Date": false,
> 		"decodeURI": false,
> 		"decodeURIComponent": false,
> 		"encodeURI": false,
> 		"encodeURIComponent": false,
> 		"Error": false,
> 		"escape": false,
> 		"eval": false,
> 		"EvalError": false,
> 		"FinalizationRegistry": false,
> 		"Float32Array": false,
> 		"Float64Array": false,
> 		"Function": false,
> 		"globalThis": false,
> 		"hasOwnProperty": false,
> 		"Infinity": false,
> 		"Int16Array": false,
> 		"Int32Array": false,
> 		"Int8Array": false,
> 		"isFinite": false,
> 		"isNaN": false,
> 		"isPrototypeOf": false,
> 		"JSON": false,
> 		"Map": false,
> 		"Math": false,
> 		"NaN": false,
> 		"Number": false,
> 		"Object": false,
> 		"parseFloat": false,
> 		"parseInt": false,
> 		"Promise": false,
> 		"propertyIsEnumerable": false,
> 		"Proxy": false,
> 		"RangeError": false,
> 		"ReferenceError": false,
> 		"Reflect": false,
> 		"RegExp": false,
> 		"Set": false,
> 		"SharedArrayBuffer": false,
> 		"String": false,
> 		"Symbol": false,
> 		"SyntaxError": false,
> 		"toLocaleString": false,
> 		"toString": false,
> 		"TypeError": false,
> 		"Uint16Array": false,
> 		"Uint32Array": false,
> 		"Uint8Array": false,
> 		"Uint8ClampedArray": false,
> 		"undefined": false,
> 		"unescape": false,
> 		"URIError": false,
> 		"valueOf": false,
> 		"WeakMap": false,
> 		"WeakRef": false,
> 		"WeakSet": false
> 	},
255c391
< 		"AudioWorkletGlobalScope ": false,
---
> 		"AudioWorkletGlobalScope": false,
285a422
> 		"ClipboardItem": false,
290a428
> 		"CompressionStream": false,
308a447
> 		"CSSMatrixComponent": false,
311a451,452
> 		"CSSPerspective": false,
> 		"CSSRotate": false,
313a455,458
> 		"CSSScale": false,
> 		"CSSSkew": false,
> 		"CSSSkewX": false,
> 		"CSSSkewY": false,
317a463,464
> 		"CSSTransformValue": false,
> 		"CSSTranslate": false,
323a471
> 		"DecompressionStream": false,
344a493
> 		"DOMRectList": false,
367a517
> 		"FormDataEvent": false,
502a653
> 		"MediaMetadata": false,
510a662
> 		"MediaStreamConstraints": false,
538a691
> 		"NavigatorUAData": false,
548a702
> 		"OffscreenCanvasRenderingContext2D": false,
652a807
> 		"OverconstrainedError": false,
704a860
> 		"ReadableByteStreamController": false,
705a862,865
> 		"ReadableStreamBYOBReader": false,
> 		"ReadableStreamBYOBRequest": false,
> 		"ReadableStreamDefaultController": false,
> 		"ReadableStreamDefaultReader": false,
708a869
> 		"reportError": false,
770a932
> 		"structuredClone": false,
773a936
> 		"SubmitEvent": false,
875a1039
> 		"TextDecoderStream": false,
876a1041
> 		"TextEncoderStream": false,
883a1049
> 		"ToggleEvent": false,
889a1056,1057
> 		"TransformStream": false,
> 		"TransformStreamDefaultController": false,
923a1092,1093
> 		"WritableStreamDefaultController": false,
> 		"WritableStreamDefaultWriter": false,
931a1102,1125
>         "XRAnchor": false,
>         "XRBoundedReferenceSpace": false,
>         "XRCPUDepthInformation": false,
>         "XRDepthInformation": false,
>         "XRFrame": false,
>         "XRInputSource": false,
>         "XRInputSourceArray": false,
>         "XRInputSourceEvent": false,
>         "XRInputSourcesChangeEvent": false,
>         "XRPose": false,
>         "XRReferenceSpace": false,
>         "XRReferenceSpaceEvent": false,
>         "XRRenderState": false,
>         "XRRigidTransform": false,
>         "XRSession": false,
>         "XRSessionEvent": false,
>         "XRSpace": false,
>         "XRSystem": false,
>         "XRView": false,
>         "XRViewerPose": false,
>         "XRViewport": false,
>         "XRWebGLBinding": false,
>         "XRWebGLDepthInformation": false,
>         "XRWebGLLayer": false,
940a1135
> 		"ByteLengthQueuingStrategy": false,
945a1141
> 		"CompressionStream": false,
946a1143,1150
> 		"CountQueuingStrategy": false,
> 		"crypto": false,
> 		"Crypto": false,
> 		"CryptoKey": false,
> 		"CustomEvent": false,
> 		"DecompressionStream": false,
> 		"ErrorEvent": false,
> 		"Event": false,
947a1152
> 		"File": false,
966a1172
> 		"MessageEvent": false,
985a1192,1193
> 		"PerformanceObserver": false,
> 		"PerformanceObserverEntryList": false,
990a1199,1204
> 		"ReadableByteStreamController": false,
> 		"ReadableStream": false,
> 		"ReadableStreamBYOBReader": false,
> 		"ReadableStreamBYOBRequest": false,
> 		"ReadableStreamDefaultController": false,
> 		"ReadableStreamDefaultReader": false,
991a1206
> 		"reportError": false,
997a1213
> 		"SubtleCrypto": false,
998a1215
> 		"TextDecoderStream": false,
999a1217,1219
> 		"TextEncoderStream": false,
> 		"TransformStream": false,
> 		"TransformStreamDefaultController": false,
1001a1222
> 		"WebAssembly": false,
1004a1226,1228
> 		"WritableStream": false,
> 		"WritableStreamDefaultController": false,
> 		"WritableStreamDefaultWriter": false,
1009a1234,1239
> 		"AbortController": false,
> 		"AbortSignal": false,
> 		"atob": false,
> 		"Blob": false,
> 		"BroadcastChannel": false,
> 		"btoa": false,
1010a1241
> 		"ByteLengthQueuingStrategy": false,
1013a1245
> 		"CompressionStream": false,
1014a1247,1255
> 		"CountQueuingStrategy": false,
> 		"crypto": false,
> 		"Crypto": false,
> 		"CryptoKey": false,
> 		"CustomEvent": false,
> 		"DecompressionStream": false,
> 		"DOMException": false,
> 		"Event": false,
> 		"EventTarget": false,
1015a1257,1259
> 		"fetch": false,
> 		"File": false,
> 		"FormData": false,
1016a1261
> 		"Headers": false,
1017a1263,1265
> 		"MessageChannel": false,
> 		"MessageEvent": false,
> 		"MessagePort": false,
1018a1267,1273
> 		"performance": false,
> 		"PerformanceEntry": false,
> 		"PerformanceMark": false,
> 		"PerformanceMeasure": false,
> 		"PerformanceObserver": false,
> 		"PerformanceObserverEntryList": false,
> 		"PerformanceResourceTiming": false,
1020a1276,1282
> 		"ReadableByteStreamController": false,
> 		"ReadableStream": false,
> 		"ReadableStreamBYOBReader": false,
> 		"ReadableStreamBYOBRequest": false,
> 		"ReadableStreamDefaultController": false,
> 		"ReadableStreamDefaultReader": false,
> 		"Request": false,
1021a1284
> 		"Response": false,
1024a1288,1289
> 		"structuredClone": false,
> 		"SubtleCrypto": false,
1025a1291
> 		"TextDecoderStream": false,
1026a1293,1295
> 		"TextEncoderStream": false,
> 		"TransformStream": false,
> 		"TransformStreamDefaultController": false,
1028c1297,1301
< 		"URLSearchParams": false
---
> 		"URLSearchParams": false,
> 		"WebAssembly": false,
> 		"WritableStream": false,
> 		"WritableStreamDefaultController": false,
> 		"WritableStreamDefaultWriter": false
1029a1303,1369
> 	"nodeBuiltin": {
> 		"AbortController": false,
> 		"AbortSignal": false,
> 		"atob": false,
> 		"Blob": false,
> 		"BroadcastChannel": false,
> 		"btoa": false,
> 		"Buffer": false,
> 		"ByteLengthQueuingStrategy": false,
> 		"clearImmediate": false,
> 		"clearInterval": false,
> 		"clearTimeout": false,
> 		"CompressionStream": false,
> 		"console": false,
> 		"CountQueuingStrategy": false,
> 		"crypto": false,
> 		"Crypto": false,
> 		"CryptoKey": false,
> 		"CustomEvent": false,
> 		"DecompressionStream": false,
> 		"DOMException": false,
> 		"Event": false,
> 		"EventTarget": false,
> 		"fetch": false,
> 		"File": false,
> 		"FormData": false,
> 		"global": false,
> 		"Headers": false,
> 		"Intl": false,
> 		"MessageChannel": false,
> 		"MessageEvent": false,
> 		"MessagePort": false,
> 		"performance": false,
> 		"PerformanceEntry": false,
> 		"PerformanceMark": false,
> 		"PerformanceMeasure": false,
> 		"PerformanceObserver": false,
> 		"PerformanceObserverEntryList": false,
> 		"PerformanceResourceTiming": false,
> 		"process": false,
> 		"queueMicrotask": false,
> 		"ReadableByteStreamController": false,
> 		"ReadableStream": false,
> 		"ReadableStreamBYOBReader": false,
> 		"ReadableStreamBYOBRequest": false,
> 		"ReadableStreamDefaultController": false,
> 		"ReadableStreamDefaultReader": false,
> 		"Request": false,
> 		"Response": false,
> 		"setImmediate": false,
> 		"setInterval": false,
> 		"setTimeout": false,
> 		"structuredClone": false,
> 		"SubtleCrypto": false,
> 		"TextDecoder": false,
> 		"TextDecoderStream": false,
> 		"TextEncoder": false,
> 		"TextEncoderStream": false,
> 		"TransformStream": false,
> 		"TransformStreamDefaultController": false,
> 		"URL": false,
> 		"URLSearchParams": false,
> 		"WebAssembly": false,
> 		"WritableStream": false,
> 		"WritableStreamDefaultController": false,
> 		"WritableStreamDefaultWriter": false
> 	},
1068a1409
> 		"expectAsync": false,
1076a1418
> 		"spyOnAllFunctions": false,
1186,1196c1528,1540
< 		"ActiveXObject": true,
< 		"Enumerator": true,
< 		"GetObject": true,
< 		"ScriptEngine": true,
< 		"ScriptEngineBuildVersion": true,
< 		"ScriptEngineMajorVersion": true,
< 		"ScriptEngineMinorVersion": true,
< 		"VBArray": true,
< 		"WScript": true,
< 		"WSH": true,
< 		"XDomainRequest": true
---
> 		"ActiveXObject": false,
> 		"CollectGarbage": false,
> 		"Debug": false,
> 		"Enumerator": false,
> 		"GetObject": false,
> 		"RuntimeObject": false,
> 		"ScriptEngine": false,
> 		"ScriptEngineBuildVersion": false,
> 		"ScriptEngineMajorVersion": false,
> 		"ScriptEngineMinorVersion": false,
> 		"VBArray": false,
> 		"WScript": false,
> 		"WSH": false
1279d1622
< 		"_": false,
1374a1718
> 		"ByteLengthQueuingStrategy": false,
1383a1728
> 		"CompressionStream": false,
1384a1730,1737
> 		"CountQueuingStrategy": false,
> 		"crypto": false,
> 		"Crypto": false,
> 		"CryptoKey": false,
> 		"CustomEvent": false,
> 		"DecompressionStream": false,
> 		"ErrorEvent": false,
> 		"Event": false,
1388a1742
> 		"File": false,
1407a1762
> 		"MessageEvent": false,
1434a1790,1791
> 		"PerformanceObserver": false,
> 		"PerformanceObserverEntryList": false,
1439a1797,1802
> 		"ReadableByteStreamController": false,
> 		"ReadableStream": false,
> 		"ReadableStreamBYOBReader": false,
> 		"ReadableStreamBYOBRequest": false,
> 		"ReadableStreamDefaultController": false,
> 		"ReadableStreamDefaultReader": false,
1452a1816
> 		"SubtleCrypto": false,
1453a1818
> 		"TextDecoderStream": false,
1454a1820,1822
> 		"TextEncoderStream": false,
> 		"TransformStream": false,
> 		"TransformStreamDefaultController": false,
1456a1825
> 		"WebAssembly": false,
1460a1830,1832
> 		"WritableStream": false,
> 		"WritableStreamDefaultController": false,
> 		"WritableStreamDefaultWriter": false,
1464a1837
> 		"atom": false,
1499a1873,1879
> 		"AbortController": false,
> 		"AbortSignal": false,
> 		"atob": false,
> 		"Blob": false,
> 		"BroadcastChannel": false,
> 		"btoa": false,
> 		"ByteLengthQueuingStrategy": false,
1501a1882
> 		"CompressionStream": false,
1502a1884,1916
> 		"CountQueuingStrategy": false,
> 		"crypto": false,
> 		"Crypto": false,
> 		"CryptoKey": false,
> 		"CustomEvent": false,
> 		"DecompressionStream": false,
> 		"DOMException": false,
> 		"Event": false,
> 		"EventTarget": false,
> 		"fetch": false,
> 		"File": false,
> 		"FormData": false,
> 		"Headers": false,
> 		"Intl": false,
> 		"MessageChannel": false,
> 		"MessageEvent": false,
> 		"MessagePort": false,
> 		"performance": false,
> 		"PerformanceEntry": false,
> 		"PerformanceMark": false,
> 		"PerformanceMeasure": false,
> 		"PerformanceObserver": false,
> 		"PerformanceObserverEntryList": false,
> 		"PerformanceResourceTiming": false,
> 		"queueMicrotask": false,
> 		"ReadableByteStreamController": false,
> 		"ReadableStream": false,
> 		"ReadableStreamBYOBReader": false,
> 		"ReadableStreamBYOBRequest": false,
> 		"ReadableStreamDefaultController": false,
> 		"ReadableStreamDefaultReader": false,
> 		"Request": false,
> 		"Response": false,
1504a1919,1926
> 		"structuredClone": false,
> 		"SubtleCrypto": false,
> 		"TextDecoder": false,
> 		"TextDecoderStream": false,
> 		"TextEncoder": false,
> 		"TextEncoderStream": false,
> 		"TransformStream": false,
> 		"TransformStreamDefaultController": false,
1506c1928,1932
< 		"URLSearchParams": false
---
> 		"URLSearchParams": false,
> 		"WebAssembly": false,
> 		"WritableStream": false,
> 		"WritableStreamDefaultController": false,
> 		"WritableStreamDefaultWriter": false
1517a1944
> 		"GM_addElement": false,
1518a1946
> 		"GM_addValueChangeListener": false,
1519a1948
> 		"GM_download": false,
1521a1951,1952
> 		"GM_getTab": false,
> 		"GM_getTabs": false,
1525a1957
> 		"GM_notification": false,
1527a1960,1961
> 		"GM_removeValueChangeListener": false,
> 		"GM_saveTab": false,
1529a1964
> 		"GM_unregisterMenuCommand": false,
Only in bun/node_modules/globals: index.d.ts
diff -r npm/node_modules/globals/license bun/node_modules/globals/license
3c3
< Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)
---
> Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)
diff -r npm/node_modules/globals/package.json bun/node_modules/globals/package.json
3c3
< 	"version": "11.12.0",
---
> 	"version": "13.24.0",
6a7
> 	"funding": "https://github.com/sponsors/sindresorhus",
10c11
< 		"url": "sindresorhus.com"
---
> 		"url": "https://sindresorhus.com"
11a13
> 	"sideEffects": false,
13c15
< 		"node": ">=4"
---
> 		"node": ">=8"
19a22
> 		"index.d.ts",
31a35,37
> 	"dependencies": {
> 		"type-fest": "^0.20.2"
> 	},
33,34c39,41
< 		"ava": "0.21.0",
< 		"xo": "0.18.0"
---
> 		"ava": "^2.4.0",
> 		"tsd": "^0.14.0",
> 		"xo": "^0.36.1"
39c46,54
< 		]
---
> 		],
> 		"rules": {
> 			"node/no-unsupported-features/es-syntax": "off"
> 		}
> 	},
> 	"tsd": {
> 		"compilerOptions": {
> 			"resolveJsonModule": true
> 		}
diff -r npm/node_modules/globals/readme.md bun/node_modules/globals/readme.md
1c1
< # globals [![Build Status](https://travis-ci.org/sindresorhus/globals.svg?branch=master)](https://travis-ci.org/sindresorhus/globals)
---
> # globals
5c5
< Extracted from [JSHint](https://github.com/jshint/jshint/blob/3a8efa979dbb157bfb5c10b5826603a55a33b9ad/src/vars.js) and [ESLint](https://github.com/eslint/eslint/blob/b648406218f8a2d7302b98f5565e23199f44eb31/conf/environments.json) and merged.
---
> It's just a [JSON file](globals.json), so use it in any environment.
7c7
< It's just a [JSON file](globals.json), so use it in whatever environment you like.
---
> This package is used by ESLint.
9c9
< **This module [no longer accepts](https://github.com/sindresorhus/globals/issues/82) new environments. If you need it for ESLint, just [create a plugin](http://eslint.org/docs/developer-guide/working-with-plugins#environments-in-plugins).**
---
> **This package [no longer accepts](https://github.com/sindresorhus/globals/issues/82) new environments. If you need it for ESLint, just [create a plugin](http://eslint.org/docs/developer-guide/working-with-plugins#environments-in-plugins).**
11d10
< 
13a13,14
> ```sh
> npm install globals
15,16d15
< $ npm install globals
< ```
18d16
< 
31c29
< 	...
---
> 	…
37a36
> For Node.js this package provides two sets of globals:
39c38,42
< ## License
---
> - `globals.nodeBuiltin`: Globals available to all code running in Node.js.
> 	These will usually be available as properties on the `global` object and include `process`, `Buffer`, but not CommonJS arguments like `require`.
> 	See: https://nodejs.org/api/globals.html
> - `globals.node`: A combination of the globals from `nodeBuiltin` plus all CommonJS arguments ("CommonJS module scope").
> 	See: https://nodejs.org/api/modules.html#modules_the_module_scope
41c44
< MIT © [Sindre Sorhus](https://sindresorhus.com)
---
> When analyzing code that is known to run outside of a CommonJS wrapper, for example, JavaScript modules, `nodeBuiltin` can find accidental CommonJS references.
diff -r npm/node_modules/minimatch/LICENSE bun/node_modules/minimatch/LICENSE
3c3
< Copyright (c) 2011-2023 Isaac Z. Schlueter and Contributors
---
> Copyright (c) Isaac Z. Schlueter and Contributors
diff -r npm/node_modules/minimatch/README.md bun/node_modules/minimatch/README.md
4a5,7
> [![Build Status](https://travis-ci.org/isaacs/minimatch.svg?branch=master)](http://travis-ci.org/isaacs/minimatch)
> 
> 
12,16c15,16
< ```js
< // hybrid module, load with require() or import
< import { minimatch } from 'minimatch'
< // or:
< const { minimatch } = require('minimatch')
---
> ```javascript
> var minimatch = require("minimatch")
18,20c18,20
< minimatch('bar.foo', '*.foo') // true!
< minimatch('bar.foo', '*.bar') // false!
< minimatch('bar.foo', '*.+(bar|foo)', { debug: true }) // true, and noisy!
---
> minimatch("bar.foo", "*.foo") // true!
> minimatch("bar.foo", "*.bar") // false!
> minimatch("bar.foo", "*.+(bar|foo)", { debug: true }) // true, and noisy!
27,37c27,29
< - Brace Expansion
< - Extended glob matching
< - "Globstar" `**` matching
< - [Posix character
<   classes](https://www.gnu.org/software/bash/manual/html_node/Pattern-Matching.html),
<   like `[[:alpha:]]`, supporting the full range of Unicode
<   characters. For example, `[[:alpha:]]` will match against
<   `'é'`, though `[a-zA-Z]` will not. Collating symbol and set
<   matching is not supported, so `[[=e=]]` will _not_ match `'é'`
<   and `[[.ch.]]` will not match `'ch'` in locales where `ch` is
<   considered a single character.
---
> * Brace Expansion
> * Extended glob matching
> * "Globstar" `**` matching
41,45c33,36
< - `man sh`
< - `man bash` [Pattern
<   Matching](https://www.gnu.org/software/bash/manual/html_node/Pattern-Matching.html)
< - `man 3 fnmatch`
< - `man 5 gitignore`
---
> * `man sh`
> * `man bash`
> * `man 3 fnmatch`
> * `man 5 gitignore`
47,83d37
< ## Windows
< 
< **Please only use forward-slashes in glob expressions.**
< 
< Though windows uses either `/` or `\` as its path separator, only `/`
< characters are used by this glob implementation. You must use
< forward-slashes **only** in glob expressions. Back-slashes in patterns
< will always be interpreted as escape characters, not path separators.
< 
< Note that `\` or `/` _will_ be interpreted as path separators in paths on
< Windows, and will match against `/` in glob expressions.
< 
< So just always use `/` in patterns.
< 
< ### UNC Paths
< 
< On Windows, UNC paths like `//?/c:/...` or
< `//ComputerName/Share/...` are handled specially.
< 
< - Patterns starting with a double-slash followed by some
<   non-slash characters will preserve their double-slash. As a
<   result, a pattern like `//*` will match `//x`, but not `/x`.
< - Patterns staring with `//?/<drive letter>:` will _not_ treat
<   the `?` as a wildcard character. Instead, it will be treated
<   as a normal string.
< - Patterns starting with `//?/<drive letter>:/...` will match
<   file paths starting with `<drive letter>:/...`, and vice versa,
<   as if the `//?/` was not present. This behavior only is
<   present when the drive letters are a case-insensitive match to
<   one another. The remaining portions of the path/pattern are
<   compared case sensitively, unless `nocase:true` is set.
< 
< Note that specifying a UNC path using `\` characters as path
< separators is always allowed in the file path argument, but only
< allowed in the pattern argument when `windowsPathsNoEscape: true`
< is set in the options.
< 
89c43
< var Minimatch = require('minimatch').Minimatch
---
> var Minimatch = require("minimatch").Minimatch
95,97c49,51
< - `pattern` The original pattern the minimatch object represents.
< - `options` The options supplied to the constructor.
< - `set` A 2-dimensional array of regexp or string expressions.
---
> * `pattern` The original pattern the minimatch object represents.
> * `options` The options supplied to the constructor.
> * `set` A 2-dimensional array of regexp or string expressions.
99,100c53,54
<   array corresponds to a brace-expanded pattern. Each item in the row
<   corresponds to a single path-part. For example, the pattern
---
>   array corresponds to a brace-expanded pattern.  Each item in the row
>   corresponds to a single path-part.  For example, the pattern
106,109c60,63
<   If a portion of the pattern doesn't have any "magic" in it
<   (that is, it's something like `"foo"` rather than `fo*o?`), then it
<   will be left as a string rather than converted to a regular
<   expression.
---
>     If a portion of the pattern doesn't have any "magic" in it
>     (that is, it's something like `"foo"` rather than `fo*o?`), then it
>     will be left as a string rather than converted to a regular
>     expression.
111,112c65,66
< - `regexp` Created by the `makeRe` method. A single regular expression
<   expressing the entire pattern. This is useful in cases where you wish
---
> * `regexp` Created by the `makeRe` method.  A single regular expression
>   expressing the entire pattern.  This is useful in cases where you wish
114,116c68,70
< - `negate` True if the pattern is negated.
< - `comment` True if the pattern is a comment.
< - `empty` True if the pattern is `""`.
---
> * `negate` True if the pattern is negated.
> * `comment` True if the pattern is a comment.
> * `empty` True if the pattern is `""`.
120c74
< - `makeRe()` Generate the `regexp` member if necessary, and return it.
---
> * `makeRe` Generate the `regexp` member if necessary, and return it.
122c76
< - `match(fname)` Return true if the filename matches the pattern, or
---
> * `match(fname)` Return true if the filename matches the pattern, or
124,125c78,79
< - `matchOne(fileArray, patternArray, partial)` Take a `/`-split
<   filename, and match it against a single row in the `regExpSet`. This
---
> * `matchOne(fileArray, patternArray, partial)` Take a `/`-split
>   filename, and match it against a single row in the `regExpSet`.  This
128,134d81
< - `hasMagic()` Returns true if the parsed pattern contains any
<   magic characters. Returns false if all comparator parts are
<   string literals. If the `magicalBraces` option is set on the
<   constructor, then it will consider brace expansions which are
<   not otherwise magical to be magic. If not set, then a pattern
<   like `a{b,c}d` will return `false`, because neither `abd` nor
<   `acd` contain any special glob characters.
136,143d82
<   This does **not** mean that the pattern string can be used as a
<   literal filename, as it may contain magic glob characters that
<   are escaped. For example, the pattern `\\*` or `[*]` would not
<   be considered to have magic, as the matching portion parses to
<   the literal string `'*'` and would match a path named `'*'`,
<   not `'\\*'` or `'[*]'`. The `minimatch.unescape()` method may
<   be used to remove escape characters.
< 
148c87
< Main export. Tests a path against the pattern using the options.
---
> Main export.  Tests a path against the pattern using the options.
151c90
< var isJS = minimatch(file, '*.js', { matchBase: true })
---
> var isJS = minimatch(file, "*.js", { matchBase: true })
157c96
< supplied argument, suitable for use with `Array.filter`. Example:
---
> supplied argument, suitable for use with `Array.filter`.  Example:
160c99
< var javascripts = fileList.filter(minimatch.filter('*.js', { matchBase: true }))
---
> var javascripts = fileList.filter(minimatch.filter("*.js", {matchBase: true}))
163,190d101
< ### minimatch.escape(pattern, options = {})
< 
< Escape all magic characters in a glob pattern, so that it will
< only ever match literal strings
< 
< If the `windowsPathsNoEscape` option is used, then characters are
< escaped by wrapping in `[]`, because a magic character wrapped in
< a character class can only be satisfied by that exact character.
< 
< Slashes (and backslashes in `windowsPathsNoEscape` mode) cannot
< be escaped or unescaped.
< 
< ### minimatch.unescape(pattern, options = {})
< 
< Un-escape a glob string that may contain some escaped characters.
< 
< If the `windowsPathsNoEscape` option is used, then square-brace
< escapes are removed, but not backslash escapes. For example, it
< will turn the string `'[*]'` into `*`, but it will not turn
< `'\\*'` into `'*'`, because `\` is a path separator in
< `windowsPathsNoEscape` mode.
< 
< When `windowsPathsNoEscape` is not set, then both brace escapes
< and backslash escapes are removed.
< 
< Slashes (and backslashes in `windowsPathsNoEscape` mode) cannot
< be escaped or unescaped.
< 
194c105
< files, in the style of fnmatch or glob. If nothing is matched, and
---
> files, in the style of fnmatch or glob.  If nothing is matched, and
198c109
< var javascripts = minimatch.match(fileList, '*.js', { matchBase: true })
---
> var javascripts = minimatch.match(fileList, "*.js", {matchBase: true}))
237,246d147
< ### nocaseMagicOnly
< 
< When used with `{nocase: true}`, create regular expressions that
< are case-insensitive, but leave string match portions untouched.
< Has no effect when used without `{nocase: true}`
< 
< Useful when some other form of case-insensitive matching is used,
< or if the original string representation is useful in some other
< way.
< 
250c151
< the pattern itself if this option is set. When not set, an empty list
---
> the pattern itself if this option is set.  When not set, an empty list
253,262d153
< ### magicalBraces
< 
< This only affects the results of the `Minimatch.hasMagic` method.
< 
< If the pattern contains brace expansions, such as `a{b,c}d`, but
< no other magic characters, then the `Minimatch.hasMagic()` method
< will return `false` by default. When this option set, it will
< return `true` for brace expansion as well as other magic glob
< characters.
< 
266c157
< against the basename of the path if it contains slashes. For example,
---
> against the basename of the path if it contains slashes.  For example,
285c176
< Compare a partial path to a pattern. As long as the parts of the path that
---
> Compare a partial path to a pattern.  As long as the parts of the path that
287c178
< match. This is useful in applications where you're walking through a
---
> match.  This is useful in applications where you're walking through a
294,295c185,186
< minimatch('/a/b', '/a/*/c/d', { partial: true }) // true, might be /a/b/c/d
< minimatch('/a/b', '/**/d', { partial: true }) // true, might be /a/b/.../d
---
> minimatch('/a/b', '/a/*/c/d', { partial: true })  // true, might be /a/b/c/d
> minimatch('/a/b', '/**/d', { partial: true })     // true, might be /a/b/.../d
299c190
< ### windowsPathsNoEscape
---
> ### allowWindowsEscape
301,309c192,194
< Use `\\` as a path separator _only_, and _never_ as an escape
< character. If set, all `\\` characters are replaced with `/` in
< the pattern. Note that this makes it **impossible** to match
< against paths containing literal glob pattern characters, but
< allows matching with patterns constructed using `path.join()` and
< `path.resolve()` on Windows platforms, mimicking the (buggy!)
< behavior of earlier versions on Windows. Please use with
< caution, and be mindful of [the caveat about Windows
< paths](#windows).
---
> Windows path separator `\` is by default converted to `/`, which
> prohibits the usage of `\` as a escape character. This flag skips that
> behavior and allows using the escape character.
311,397d195
< For legacy reasons, this is also set if
< `options.allowWindowsEscape` is set to the exact value `false`.
< 
< ### windowsNoMagicRoot
< 
< When a pattern starts with a UNC path or drive letter, and in
< `nocase:true` mode, do not convert the root portions of the
< pattern into a case-insensitive regular expression, and instead
< leave them as strings.
< 
< This is the default when the platform is `win32` and
< `nocase:true` is set.
< 
< ### preserveMultipleSlashes
< 
< By default, multiple `/` characters (other than the leading `//`
< in a UNC path, see "UNC Paths" above) are treated as a single
< `/`.
< 
< That is, a pattern like `a///b` will match the file path `a/b`.
< 
< Set `preserveMultipleSlashes: true` to suppress this behavior.
< 
< ### optimizationLevel
< 
< A number indicating the level of optimization that should be done
< to the pattern prior to parsing and using it for matches.
< 
< Globstar parts `**` are always converted to `*` when `noglobstar`
< is set, and multiple adjacent `**` parts are converted into a
< single `**` (ie, `a/**/**/b` will be treated as `a/**/b`, as this
< is equivalent in all cases).
< 
< - `0` - Make no further changes. In this mode, `.` and `..` are
<   maintained in the pattern, meaning that they must also appear
<   in the same position in the test path string. Eg, a pattern
<   like `a/*/../c` will match the string `a/b/../c` but not the
<   string `a/c`.
< - `1` - (default) Remove cases where a double-dot `..` follows a
<   pattern portion that is not `**`, `.`, `..`, or empty `''`. For
<   example, the pattern `./a/b/../*` is converted to `./a/*`, and
<   so it will match the path string `./a/c`, but not the path
<   string `./a/b/../c`. Dots and empty path portions in the
<   pattern are preserved.
< - `2` (or higher) - Much more aggressive optimizations, suitable
<   for use with file-walking cases:
< 
<   - Remove cases where a double-dot `..` follows a pattern
<     portion that is not `**`, `.`, or empty `''`. Remove empty
<     and `.` portions of the pattern, where safe to do so (ie,
<     anywhere other than the last position, the first position, or
<     the second position in a pattern starting with `/`, as this
<     may indicate a UNC path on Windows).
<   - Convert patterns containing `<pre>/**/../<p>/<rest>` into the
<     equivalent `<pre>/{..,**}/<p>/<rest>`, where `<p>` is a
<     a pattern portion other than `.`, `..`, `**`, or empty
<     `''`.
<   - Dedupe patterns where a `**` portion is present in one and
<     omitted in another, and it is not the final path portion, and
<     they are otherwise equivalent. So `{a/**/b,a/b}` becomes
<     `a/**/b`, because `**` matches against an empty path portion.
<   - Dedupe patterns where a `*` portion is present in one, and a
<     non-dot pattern other than `**`, `.`, `..`, or `''` is in the
<     same position in the other. So `a/{*,x}/b` becomes `a/*/b`,
<     because `*` can match against `x`.
< 
<   While these optimizations improve the performance of
<   file-walking use cases such as [glob](http://npm.im/glob) (ie,
<   the reason this module exists), there are cases where it will
<   fail to match a literal string that would have been matched in
<   optimization level 1 or 0.
< 
<   Specifically, while the `Minimatch.match()` method will
<   optimize the file path string in the same ways, resulting in
<   the same matches, it will fail when tested with the regular
<   expression provided by `Minimatch.makeRe()`, unless the path
<   string is first processed with
<   `minimatch.levelTwoFileOptimize()` or similar.
< 
< ### platform
< 
< When set to `win32`, this will trigger all windows-specific
< behaviors (special handling for UNC paths, and treating `\` as
< separators in file paths for comparison.)
< 
< Defaults to the value of `process.platform`.
< 
400,403c198,200
< While strict compliance with the existing standards is a
< worthwhile goal, some discrepancies exist between minimatch and
< other implementations. Some are intentional, and some are
< unavoidable.
---
> While strict compliance with the existing standards is a worthwhile
> goal, some discrepancies exist between minimatch and other
> implementations, and are intentional.
405c202
< If the pattern starts with a `!` character, then it is negated. Set the
---
> If the pattern starts with a `!` character, then it is negated.  Set the
407,408c204,205
< characters normally. This is perhaps relevant if you wish to start the
< pattern with a negative extglob pattern like `!(a|B)`. Multiple `!`
---
> characters normally.  This is perhaps relevant if you wish to start the
> pattern with a negative extglob pattern like `!(a|B)`.  Multiple `!`
413c210
< will not match anything. Use `\#` to match a literal `#` at the
---
> will not match anything.  Use `\#` to match a literal `#` at the
417c214
< `noglobstar` flag is set. This is supported in the manner of bsdglob
---
> `noglobstar` flag is set.  This is supported in the manner of bsdglob
419c216
< thing in a path part. That is, `a/**/b` will match `a/x/y/b`, but
---
> thing in a path part.  That is, `a/**/b` will match `a/x/y/b`, but
424c221
< interpreting the character escapes. For example,
---
> interpreting the character escapes.  For example,
426c223
< `"*a?"`. This is akin to setting the `nullglob` option in bash, except
---
> `"*a?"`.  This is akin to setting the `nullglob` option in bash, except
430c227
< other interpretation of the glob pattern. Thus, a pattern like
---
> other interpretation of the glob pattern.  Thus, a pattern like
433,454c230
< checked for validity. Since those two are valid, matching proceeds.
< 
< Negated extglob patterns are handled as closely as possible to
< Bash semantics, but there are some cases with negative extglobs
< which are exceedingly difficult to express in a JavaScript
< regular expression. In particular the negated pattern
< `<start>!(<pattern>*|)*` will in bash match anything that does
< not start with `<start><pattern>`. However,
< `<start>!(<pattern>*)*` _will_ match paths starting with
< `<start><pattern>`, because the empty string can match against
< the negated portion. In this library, `<start>!(<pattern>*|)*`
< will _not_ match any pattern starting with `<start>`, due to a
< difference in precisely which patterns are considered "greedy" in
< Regular Expressions vs bash path expansion. This may be fixable,
< but not without incurring some complexity and performance costs,
< and the trade-off seems to not be worth pursuing.
< 
< Note that `fnmatch(3)` in libc is an extremely naive string comparison
< matcher, which does not do anything special for slashes. This library is
< designed to be used in glob searching and file walkers, and so it does do
< special things with `/`. Thus, `foo*` will not match `foo/bar` in this
< library, even though it would in `fnmatch(3)`.
---
> checked for validity.  Since those two are valid, matching proceeds.
Only in npm/node_modules/minimatch: dist
Only in bun/node_modules/minimatch: minimatch.js
diff -r npm/node_modules/minimatch/package.json bun/node_modules/minimatch/package.json
5c5,8
<   "version": "9.0.5",
---
>   "version": "3.1.2",
>   "publishConfig": {
>     "tag": "v3-legacy"
>   },
10,27c13
<   "main": "./dist/commonjs/index.js",
<   "types": "./dist/commonjs/index.d.ts",
<   "exports": {
<     "./package.json": "./package.json",
<     ".": {
<       "import": {
<         "types": "./dist/esm/index.d.ts",
<         "default": "./dist/esm/index.js"
<       },
<       "require": {
<         "types": "./dist/commonjs/index.d.ts",
<         "default": "./dist/commonjs/index.js"
<       }
<     }
<   },
<   "files": [
<     "dist"
<   ],
---
>   "main": "minimatch.js",
28a15
>     "test": "tap",
31,39c18
<     "prepublishOnly": "git push origin --follow-tags",
<     "prepare": "tshy",
<     "pretest": "npm run prepare",
<     "presnap": "npm run prepare",
<     "test": "tap",
<     "snap": "tap",
<     "format": "prettier --write . --loglevel warn",
<     "benchmark": "node benchmark/index.js",
<     "typedoc": "typedoc --tsconfig tsconfig-esm.json ./src/*.ts"
---
>     "postpublish": "git push origin --all; git push origin --tags"
41,51d19
<   "prettier": {
<     "semi": false,
<     "printWidth": 80,
<     "tabWidth": 2,
<     "useTabs": false,
<     "singleQuote": true,
<     "jsxSingleQuote": false,
<     "bracketSameLine": true,
<     "arrowParens": "avoid",
<     "endOfLine": "lf"
<   },
53c21
<     "node": ">=16 || 14 >=14.17"
---
>     "node": "*"
56c24
<     "brace-expansion": "^2.0.1"
---
>     "brace-expansion": "^1.1.7"
59,69c27
<     "@types/brace-expansion": "^1.1.0",
<     "@types/node": "^18.15.11",
<     "@types/tap": "^15.0.8",
<     "eslint-config-prettier": "^8.6.0",
<     "mkdirp": "1",
<     "prettier": "^2.8.2",
<     "tap": "^18.7.2",
<     "ts-node": "^10.9.1",
<     "tshy": "^1.12.0",
<     "typedoc": "^0.23.21",
<     "typescript": "^4.9.3"
---
>     "tap": "^15.1.6"
71,73d28
<   "funding": {
<     "url": "https://github.com/sponsors/isaacs"
<   },
75,81c30,32
<   "tshy": {
<     "exports": {
<       "./package.json": "./package.json",
<       ".": "./src/index.ts"
<     }
<   },
<   "type": "module"
---
>   "files": [
>     "minimatch.js"
>   ]
Only in bun/node_modules/orval/node_modules/ajv: node_modules
Only in npm/node_modules/orval/node_modules: json-schema-traverse
Only in bun/node_modules/typedoc: node_modules
Only in npm/node_modules/vite: node_modules
