/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Swagger Petstore - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
You can now help us improve the API whether it's by making changes to the definition itself or to the code.
That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

_If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_

Some useful links:
- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 * OpenAPI spec version: 1.0.11
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { LoginUserParams, User } from ".././models";

import { customFetch } from "../../custom-fetch";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export type HTTPStatusCode1xx = 100 | 101 | 102 | 103;
export type HTTPStatusCode2xx = 200 | 201 | 202 | 203 | 204 | 205 | 206 | 207;
export type HTTPStatusCode3xx = 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308;
export type HTTPStatusCode4xx =
  | 400
  | 401
  | 402
  | 403
  | 404
  | 405
  | 406
  | 407
  | 408
  | 409
  | 410
  | 411
  | 412
  | 413
  | 414
  | 415
  | 416
  | 417
  | 418
  | 419
  | 420
  | 421
  | 422
  | 423
  | 424
  | 426
  | 428
  | 429
  | 431
  | 451;
export type HTTPStatusCode5xx = 500 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
export type HTTPStatusCodes =
  | HTTPStatusCode1xx
  | HTTPStatusCode2xx
  | HTTPStatusCode3xx
  | HTTPStatusCode4xx
  | HTTPStatusCode5xx;

/**
 * This can only be done by the logged in user.
 * @summary Create user
 */
export type createUserResponseDefault = {
  data: User;
  status: number;
};

export type createUserResponseComposite = createUserResponseDefault;

export type createUserResponse = createUserResponseComposite & {
  headers: Headers;
};

export const getCreateUserUrl = () => {
  return `http://localhost:8000/user`;
};

export const createUser = async (
  user: User,
  options?: RequestInit,
): Promise<createUserResponse> => {
  return customFetch<createUserResponse>(getCreateUserUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(user),
  });
};

export const getCreateUserMutationOptions = <
  TError = User,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createUser>>,
    TError,
    { data: User },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createUser>>,
  TError,
  { data: User },
  TContext
> => {
  const mutationKey = ["createUser"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createUser>>,
    { data: User }
  > = (props) => {
    const { data } = props ?? {};

    return createUser(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof createUser>>
>;
export type CreateUserMutationBody = User;
export type CreateUserMutationError = User;

/**
 * @summary Create user
 */
export const useCreateUser = <TError = User, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createUser>>,
      TError,
      { data: User },
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createUser>>,
  TError,
  { data: User },
  TContext
> => {
  const mutationOptions = getCreateUserMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Creates list of users with given input array
 * @summary Creates list of users with given input array
 */
export type createUsersWithListInputResponse200 = {
  data: User;
  status: 200;
};

export type createUsersWithListInputResponseDefault = {
  data: void;
  status: Exclude<HTTPStatusCodes, 200>;
};

export type createUsersWithListInputResponseComposite =
  | createUsersWithListInputResponse200
  | createUsersWithListInputResponseDefault;

export type createUsersWithListInputResponse =
  createUsersWithListInputResponseComposite & {
    headers: Headers;
  };

export const getCreateUsersWithListInputUrl = () => {
  return `http://localhost:8000/user/createWithList`;
};

export const createUsersWithListInput = async (
  user: User[],
  options?: RequestInit,
): Promise<createUsersWithListInputResponse> => {
  return customFetch<createUsersWithListInputResponse>(
    getCreateUsersWithListInputUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(user),
    },
  );
};

export const getCreateUsersWithListInputMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createUsersWithListInput>>,
    TError,
    { data: User[] },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createUsersWithListInput>>,
  TError,
  { data: User[] },
  TContext
> => {
  const mutationKey = ["createUsersWithListInput"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createUsersWithListInput>>,
    { data: User[] }
  > = (props) => {
    const { data } = props ?? {};

    return createUsersWithListInput(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateUsersWithListInputMutationResult = NonNullable<
  Awaited<ReturnType<typeof createUsersWithListInput>>
>;
export type CreateUsersWithListInputMutationBody = User[];
export type CreateUsersWithListInputMutationError = void;

/**
 * @summary Creates list of users with given input array
 */
export const useCreateUsersWithListInput = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createUsersWithListInput>>,
      TError,
      { data: User[] },
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createUsersWithListInput>>,
  TError,
  { data: User[] },
  TContext
> => {
  const mutationOptions = getCreateUsersWithListInputMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Logs user into the system
 */
export type loginUserResponse200 = {
  data: string;
  status: 200;
};

export type loginUserResponse400 = {
  data: void;
  status: 400;
};

export type loginUserResponseComposite =
  | loginUserResponse200
  | loginUserResponse400;

export type loginUserResponse = loginUserResponseComposite & {
  headers: Headers;
};

export const getLoginUserUrl = (params?: LoginUserParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `http://localhost:8000/user/login?${stringifiedParams}`
    : `http://localhost:8000/user/login`;
};

export const loginUser = async (
  params?: LoginUserParams,
  options?: RequestInit,
): Promise<loginUserResponse> => {
  return customFetch<loginUserResponse>(getLoginUserUrl(params), {
    ...options,
    method: "GET",
  });
};

export const getLoginUserQueryKey = (params?: LoginUserParams) => {
  return [
    `http://localhost:8000/user/login`,
    ...(params ? [params] : []),
  ] as const;
};

export const getLoginUserQueryOptions = <
  TData = Awaited<ReturnType<typeof loginUser>>,
  TError = void,
>(
  params?: LoginUserParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof loginUser>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getLoginUserQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof loginUser>>> = ({
    signal,
  }) => loginUser(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof loginUser>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type LoginUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof loginUser>>
>;
export type LoginUserQueryError = void;

export function useLoginUser<
  TData = Awaited<ReturnType<typeof loginUser>>,
  TError = void,
>(
  params: undefined | LoginUserParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof loginUser>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof loginUser>>,
          TError,
          Awaited<ReturnType<typeof loginUser>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useLoginUser<
  TData = Awaited<ReturnType<typeof loginUser>>,
  TError = void,
>(
  params?: LoginUserParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof loginUser>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof loginUser>>,
          TError,
          Awaited<ReturnType<typeof loginUser>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useLoginUser<
  TData = Awaited<ReturnType<typeof loginUser>>,
  TError = void,
>(
  params?: LoginUserParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof loginUser>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Logs user into the system
 */

export function useLoginUser<
  TData = Awaited<ReturnType<typeof loginUser>>,
  TError = void,
>(
  params?: LoginUserParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof loginUser>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getLoginUserQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Logs out current logged in user session
 */
export type logoutUserResponseDefault = {
  data: void;
  status: number;
};

export type logoutUserResponseComposite = logoutUserResponseDefault;

export type logoutUserResponse = logoutUserResponseComposite & {
  headers: Headers;
};

export const getLogoutUserUrl = () => {
  return `http://localhost:8000/user/logout`;
};

export const logoutUser = async (
  options?: RequestInit,
): Promise<logoutUserResponse> => {
  return customFetch<logoutUserResponse>(getLogoutUserUrl(), {
    ...options,
    method: "GET",
  });
};

export const getLogoutUserQueryKey = () => {
  return [`http://localhost:8000/user/logout`] as const;
};

export const getLogoutUserQueryOptions = <
  TData = Awaited<ReturnType<typeof logoutUser>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof logoutUser>>, TError, TData>
  >;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getLogoutUserQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof logoutUser>>> = ({
    signal,
  }) => logoutUser({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof logoutUser>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type LogoutUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof logoutUser>>
>;
export type LogoutUserQueryError = void;

export function useLogoutUser<
  TData = Awaited<ReturnType<typeof logoutUser>>,
  TError = void,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof logoutUser>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof logoutUser>>,
          TError,
          Awaited<ReturnType<typeof logoutUser>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useLogoutUser<
  TData = Awaited<ReturnType<typeof logoutUser>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof logoutUser>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof logoutUser>>,
          TError,
          Awaited<ReturnType<typeof logoutUser>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useLogoutUser<
  TData = Awaited<ReturnType<typeof logoutUser>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof logoutUser>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Logs out current logged in user session
 */

export function useLogoutUser<
  TData = Awaited<ReturnType<typeof logoutUser>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof logoutUser>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getLogoutUserQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get user by user name
 */
export type getUserByNameResponse200 = {
  data: User;
  status: 200;
};

export type getUserByNameResponse400 = {
  data: void;
  status: 400;
};

export type getUserByNameResponseComposite =
  | getUserByNameResponse200
  | getUserByNameResponse400;

export type getUserByNameResponse = getUserByNameResponseComposite & {
  headers: Headers;
};

export const getGetUserByNameUrl = (username: string) => {
  return `http://localhost:8000/user/${username}`;
};

export const getUserByName = async (
  username: string,
  options?: RequestInit,
): Promise<getUserByNameResponse> => {
  return customFetch<getUserByNameResponse>(getGetUserByNameUrl(username), {
    ...options,
    method: "GET",
  });
};

export const getGetUserByNameQueryKey = (username: string) => {
  return [`http://localhost:8000/user/${username}`] as const;
};

export const getGetUserByNameQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserByName>>,
  TError = void,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUserByName>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserByNameQueryKey(username);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserByName>>> = ({
    signal,
  }) => getUserByName(username, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!username,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getUserByName>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetUserByNameQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserByName>>
>;
export type GetUserByNameQueryError = void;

export function useGetUserByName<
  TData = Awaited<ReturnType<typeof getUserByName>>,
  TError = void,
>(
  username: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUserByName>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserByName>>,
          TError,
          Awaited<ReturnType<typeof getUserByName>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetUserByName<
  TData = Awaited<ReturnType<typeof getUserByName>>,
  TError = void,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUserByName>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserByName>>,
          TError,
          Awaited<ReturnType<typeof getUserByName>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetUserByName<
  TData = Awaited<ReturnType<typeof getUserByName>>,
  TError = void,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUserByName>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Get user by user name
 */

export function useGetUserByName<
  TData = Awaited<ReturnType<typeof getUserByName>>,
  TError = void,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUserByName>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetUserByNameQueryOptions(username, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * This can only be done by the logged in user.
 * @summary Update user
 */
export type updateUserResponseDefault = {
  data: void;
  status: number;
};

export type updateUserResponseComposite = updateUserResponseDefault;

export type updateUserResponse = updateUserResponseComposite & {
  headers: Headers;
};

export const getUpdateUserUrl = (username: string) => {
  return `http://localhost:8000/user/${username}`;
};

export const updateUser = async (
  username: string,
  user: User,
  options?: RequestInit,
): Promise<updateUserResponse> => {
  return customFetch<updateUserResponse>(getUpdateUserUrl(username), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(user),
  });
};

export const getUpdateUserMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUser>>,
    TError,
    { username: string; data: User },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateUser>>,
  TError,
  { username: string; data: User },
  TContext
> => {
  const mutationKey = ["updateUser"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateUser>>,
    { username: string; data: User }
  > = (props) => {
    const { username, data } = props ?? {};

    return updateUser(username, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateUser>>
>;
export type UpdateUserMutationBody = User;
export type UpdateUserMutationError = void;

/**
 * @summary Update user
 */
export const useUpdateUser = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateUser>>,
      TError,
      { username: string; data: User },
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateUser>>,
  TError,
  { username: string; data: User },
  TContext
> => {
  const mutationOptions = getUpdateUserMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * This can only be done by the logged in user.
 * @summary Delete user
 */
export type deleteUserResponse400 = {
  data: void;
  status: 400;
};

export type deleteUserResponseComposite = deleteUserResponse400;

export type deleteUserResponse = deleteUserResponseComposite & {
  headers: Headers;
};

export const getDeleteUserUrl = (username: string) => {
  return `http://localhost:8000/user/${username}`;
};

export const deleteUser = async (
  username: string,
  options?: RequestInit,
): Promise<deleteUserResponse> => {
  return customFetch<deleteUserResponse>(getDeleteUserUrl(username), {
    ...options,
    method: "DELETE",
  });
};

export const getDeleteUserMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteUser>>,
    TError,
    { username: string },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteUser>>,
  TError,
  { username: string },
  TContext
> => {
  const mutationKey = ["deleteUser"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteUser>>,
    { username: string }
  > = (props) => {
    const { username } = props ?? {};

    return deleteUser(username, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteUser>>
>;

export type DeleteUserMutationError = void;

/**
 * @summary Delete user
 */
export const useDeleteUser = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteUser>>,
      TError,
      { username: string },
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteUser>>,
  TError,
  { username: string },
  TContext
> => {
  const mutationOptions = getDeleteUserMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
