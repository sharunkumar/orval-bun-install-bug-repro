/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Swagger Petstore - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
You can now help us improve the API whether it's by making changes to the definition itself or to the code.
That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

_If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_

Some useful links:
- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 * OpenAPI spec version: 1.0.11
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ApiResponse,
  FindPetsByStatusParams,
  FindPetsByTagsParams,
  Pet,
  UpdatePetWithFormParams,
  UploadFileParams,
} from ".././models";

import { customFetch } from "../../custom-fetch";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Update an existing pet by Id
 * @summary Update an existing pet
 */
export type updatePetResponse200 = {
  data: Pet;
  status: 200;
};

export type updatePetResponse400 = {
  data: void;
  status: 400;
};

export type updatePetResponseComposite =
  | updatePetResponse200
  | updatePetResponse400;

export type updatePetResponse = updatePetResponseComposite & {
  headers: Headers;
};

export const getUpdatePetUrl = () => {
  return `http://localhost:8000/pet`;
};

export const updatePet = async (
  pet: Pet,
  options?: RequestInit,
): Promise<updatePetResponse> => {
  return customFetch<updatePetResponse>(getUpdatePetUrl(), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(pet),
  });
};

export const getUpdatePetMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updatePet>>,
    TError,
    { data: Pet },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updatePet>>,
  TError,
  { data: Pet },
  TContext
> => {
  const mutationKey = ["updatePet"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updatePet>>,
    { data: Pet }
  > = (props) => {
    const { data } = props ?? {};

    return updatePet(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdatePetMutationResult = NonNullable<
  Awaited<ReturnType<typeof updatePet>>
>;
export type UpdatePetMutationBody = Pet;
export type UpdatePetMutationError = void;

/**
 * @summary Update an existing pet
 */
export const useUpdatePet = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updatePet>>,
      TError,
      { data: Pet },
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updatePet>>,
  TError,
  { data: Pet },
  TContext
> => {
  const mutationOptions = getUpdatePetMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Add a new pet to the store
 * @summary Add a new pet to the store
 */
export type addPetResponse200 = {
  data: Pet;
  status: 200;
};

export type addPetResponse400 = {
  data: void;
  status: 400;
};

export type addPetResponseComposite = addPetResponse200 | addPetResponse400;

export type addPetResponse = addPetResponseComposite & {
  headers: Headers;
};

export const getAddPetUrl = () => {
  return `http://localhost:8000/pet`;
};

export const addPet = async (
  pet: Pet,
  options?: RequestInit,
): Promise<addPetResponse> => {
  return customFetch<addPetResponse>(getAddPetUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(pet),
  });
};

export const getAddPetMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addPet>>,
    TError,
    { data: Pet },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addPet>>,
  TError,
  { data: Pet },
  TContext
> => {
  const mutationKey = ["addPet"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addPet>>,
    { data: Pet }
  > = (props) => {
    const { data } = props ?? {};

    return addPet(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddPetMutationResult = NonNullable<
  Awaited<ReturnType<typeof addPet>>
>;
export type AddPetMutationBody = Pet;
export type AddPetMutationError = void;

/**
 * @summary Add a new pet to the store
 */
export const useAddPet = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof addPet>>,
      TError,
      { data: Pet },
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof addPet>>,
  TError,
  { data: Pet },
  TContext
> => {
  const mutationOptions = getAddPetMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Multiple status values can be provided with comma separated strings
 * @summary Finds Pets by status
 */
export type findPetsByStatusResponse200 = {
  data: Pet[];
  status: 200;
};

export type findPetsByStatusResponse400 = {
  data: void;
  status: 400;
};

export type findPetsByStatusResponseComposite =
  | findPetsByStatusResponse200
  | findPetsByStatusResponse400;

export type findPetsByStatusResponse = findPetsByStatusResponseComposite & {
  headers: Headers;
};

export const getFindPetsByStatusUrl = (params?: FindPetsByStatusParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    const explodeParameters = ["status"];

    if (value instanceof Array && explodeParameters.includes(key)) {
      value.forEach((v) =>
        normalizedParams.append(key, v === null ? "null" : v.toString()),
      );
      return;
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `http://localhost:8000/pet/findByStatus?${stringifiedParams}`
    : `http://localhost:8000/pet/findByStatus`;
};

export const findPetsByStatus = async (
  params?: FindPetsByStatusParams,
  options?: RequestInit,
): Promise<findPetsByStatusResponse> => {
  return customFetch<findPetsByStatusResponse>(getFindPetsByStatusUrl(params), {
    ...options,
    method: "GET",
  });
};

export const getFindPetsByStatusQueryKey = (
  params?: FindPetsByStatusParams,
) => {
  return [
    `http://localhost:8000/pet/findByStatus`,
    ...(params ? [params] : []),
  ] as const;
};

export const getFindPetsByStatusQueryOptions = <
  TData = Awaited<ReturnType<typeof findPetsByStatus>>,
  TError = void,
>(
  params?: FindPetsByStatusParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findPetsByStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getFindPetsByStatusQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof findPetsByStatus>>
  > = ({ signal }) => findPetsByStatus(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findPetsByStatus>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type FindPetsByStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof findPetsByStatus>>
>;
export type FindPetsByStatusQueryError = void;

export function useFindPetsByStatus<
  TData = Awaited<ReturnType<typeof findPetsByStatus>>,
  TError = void,
>(
  params: undefined | FindPetsByStatusParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findPetsByStatus>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findPetsByStatus>>,
          TError,
          Awaited<ReturnType<typeof findPetsByStatus>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useFindPetsByStatus<
  TData = Awaited<ReturnType<typeof findPetsByStatus>>,
  TError = void,
>(
  params?: FindPetsByStatusParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findPetsByStatus>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findPetsByStatus>>,
          TError,
          Awaited<ReturnType<typeof findPetsByStatus>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useFindPetsByStatus<
  TData = Awaited<ReturnType<typeof findPetsByStatus>>,
  TError = void,
>(
  params?: FindPetsByStatusParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findPetsByStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Finds Pets by status
 */

export function useFindPetsByStatus<
  TData = Awaited<ReturnType<typeof findPetsByStatus>>,
  TError = void,
>(
  params?: FindPetsByStatusParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findPetsByStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFindPetsByStatusQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 * @summary Finds Pets by tags
 */
export type findPetsByTagsResponse200 = {
  data: Pet[];
  status: 200;
};

export type findPetsByTagsResponse400 = {
  data: void;
  status: 400;
};

export type findPetsByTagsResponseComposite =
  | findPetsByTagsResponse200
  | findPetsByTagsResponse400;

export type findPetsByTagsResponse = findPetsByTagsResponseComposite & {
  headers: Headers;
};

export const getFindPetsByTagsUrl = (params?: FindPetsByTagsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    const explodeParameters = ["tags"];

    if (value instanceof Array && explodeParameters.includes(key)) {
      value.forEach((v) =>
        normalizedParams.append(key, v === null ? "null" : v.toString()),
      );
      return;
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `http://localhost:8000/pet/findByTags?${stringifiedParams}`
    : `http://localhost:8000/pet/findByTags`;
};

export const findPetsByTags = async (
  params?: FindPetsByTagsParams,
  options?: RequestInit,
): Promise<findPetsByTagsResponse> => {
  return customFetch<findPetsByTagsResponse>(getFindPetsByTagsUrl(params), {
    ...options,
    method: "GET",
  });
};

export const getFindPetsByTagsQueryKey = (params?: FindPetsByTagsParams) => {
  return [
    `http://localhost:8000/pet/findByTags`,
    ...(params ? [params] : []),
  ] as const;
};

export const getFindPetsByTagsQueryOptions = <
  TData = Awaited<ReturnType<typeof findPetsByTags>>,
  TError = void,
>(
  params?: FindPetsByTagsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof findPetsByTags>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFindPetsByTagsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findPetsByTags>>> = ({
    signal,
  }) => findPetsByTags(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findPetsByTags>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type FindPetsByTagsQueryResult = NonNullable<
  Awaited<ReturnType<typeof findPetsByTags>>
>;
export type FindPetsByTagsQueryError = void;

export function useFindPetsByTags<
  TData = Awaited<ReturnType<typeof findPetsByTags>>,
  TError = void,
>(
  params: undefined | FindPetsByTagsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof findPetsByTags>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findPetsByTags>>,
          TError,
          Awaited<ReturnType<typeof findPetsByTags>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useFindPetsByTags<
  TData = Awaited<ReturnType<typeof findPetsByTags>>,
  TError = void,
>(
  params?: FindPetsByTagsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof findPetsByTags>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findPetsByTags>>,
          TError,
          Awaited<ReturnType<typeof findPetsByTags>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useFindPetsByTags<
  TData = Awaited<ReturnType<typeof findPetsByTags>>,
  TError = void,
>(
  params?: FindPetsByTagsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof findPetsByTags>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Finds Pets by tags
 */

export function useFindPetsByTags<
  TData = Awaited<ReturnType<typeof findPetsByTags>>,
  TError = void,
>(
  params?: FindPetsByTagsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof findPetsByTags>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFindPetsByTagsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Returns a single pet
 * @summary Find pet by ID
 */
export type getPetByIdResponse200 = {
  data: Pet;
  status: 200;
};

export type getPetByIdResponse400 = {
  data: void;
  status: 400;
};

export type getPetByIdResponseComposite =
  | getPetByIdResponse200
  | getPetByIdResponse400;

export type getPetByIdResponse = getPetByIdResponseComposite & {
  headers: Headers;
};

export const getGetPetByIdUrl = (petId: number) => {
  return `http://localhost:8000/pet/${petId}`;
};

export const getPetById = async (
  petId: number,
  options?: RequestInit,
): Promise<getPetByIdResponse> => {
  return customFetch<getPetByIdResponse>(getGetPetByIdUrl(petId), {
    ...options,
    method: "GET",
  });
};

export const getGetPetByIdQueryKey = (petId: number) => {
  return [`http://localhost:8000/pet/${petId}`] as const;
};

export const getGetPetByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getPetById>>,
  TError = void,
>(
  petId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPetById>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPetByIdQueryKey(petId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPetById>>> = ({
    signal,
  }) => getPetById(petId, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!petId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getPetById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetPetByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPetById>>
>;
export type GetPetByIdQueryError = void;

export function useGetPetById<
  TData = Awaited<ReturnType<typeof getPetById>>,
  TError = void,
>(
  petId: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPetById>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPetById>>,
          TError,
          Awaited<ReturnType<typeof getPetById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetPetById<
  TData = Awaited<ReturnType<typeof getPetById>>,
  TError = void,
>(
  petId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPetById>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPetById>>,
          TError,
          Awaited<ReturnType<typeof getPetById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetPetById<
  TData = Awaited<ReturnType<typeof getPetById>>,
  TError = void,
>(
  petId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPetById>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Find pet by ID
 */

export function useGetPetById<
  TData = Awaited<ReturnType<typeof getPetById>>,
  TError = void,
>(
  petId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPetById>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetPetByIdQueryOptions(petId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Updates a pet in the store with form data
 */
export type updatePetWithFormResponse400 = {
  data: void;
  status: 400;
};

export type updatePetWithFormResponseComposite = updatePetWithFormResponse400;

export type updatePetWithFormResponse = updatePetWithFormResponseComposite & {
  headers: Headers;
};

export const getUpdatePetWithFormUrl = (
  petId: number,
  params?: UpdatePetWithFormParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `http://localhost:8000/pet/${petId}?${stringifiedParams}`
    : `http://localhost:8000/pet/${petId}`;
};

export const updatePetWithForm = async (
  petId: number,
  params?: UpdatePetWithFormParams,
  options?: RequestInit,
): Promise<updatePetWithFormResponse> => {
  return customFetch<updatePetWithFormResponse>(
    getUpdatePetWithFormUrl(petId, params),
    {
      ...options,
      method: "POST",
    },
  );
};

export const getUpdatePetWithFormMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updatePetWithForm>>,
    TError,
    { petId: number; params?: UpdatePetWithFormParams },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updatePetWithForm>>,
  TError,
  { petId: number; params?: UpdatePetWithFormParams },
  TContext
> => {
  const mutationKey = ["updatePetWithForm"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updatePetWithForm>>,
    { petId: number; params?: UpdatePetWithFormParams }
  > = (props) => {
    const { petId, params } = props ?? {};

    return updatePetWithForm(petId, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdatePetWithFormMutationResult = NonNullable<
  Awaited<ReturnType<typeof updatePetWithForm>>
>;

export type UpdatePetWithFormMutationError = void;

/**
 * @summary Updates a pet in the store with form data
 */
export const useUpdatePetWithForm = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updatePetWithForm>>,
      TError,
      { petId: number; params?: UpdatePetWithFormParams },
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updatePetWithForm>>,
  TError,
  { petId: number; params?: UpdatePetWithFormParams },
  TContext
> => {
  const mutationOptions = getUpdatePetWithFormMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * delete a pet
 * @summary Deletes a pet
 */
export type deletePetResponse400 = {
  data: void;
  status: 400;
};

export type deletePetResponseComposite = deletePetResponse400;

export type deletePetResponse = deletePetResponseComposite & {
  headers: Headers;
};

export const getDeletePetUrl = (petId: number) => {
  return `http://localhost:8000/pet/${petId}`;
};

export const deletePet = async (
  petId: number,
  options?: RequestInit,
): Promise<deletePetResponse> => {
  return customFetch<deletePetResponse>(getDeletePetUrl(petId), {
    ...options,
    method: "DELETE",
  });
};

export const getDeletePetMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletePet>>,
    TError,
    { petId: number },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deletePet>>,
  TError,
  { petId: number },
  TContext
> => {
  const mutationKey = ["deletePet"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deletePet>>,
    { petId: number }
  > = (props) => {
    const { petId } = props ?? {};

    return deletePet(petId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeletePetMutationResult = NonNullable<
  Awaited<ReturnType<typeof deletePet>>
>;

export type DeletePetMutationError = void;

/**
 * @summary Deletes a pet
 */
export const useDeletePet = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deletePet>>,
      TError,
      { petId: number },
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deletePet>>,
  TError,
  { petId: number },
  TContext
> => {
  const mutationOptions = getDeletePetMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary uploads an image
 */
export type uploadFileResponse200 = {
  data: ApiResponse;
  status: 200;
};

export type uploadFileResponseComposite = uploadFileResponse200;

export type uploadFileResponse = uploadFileResponseComposite & {
  headers: Headers;
};

export const getUploadFileUrl = (petId: number, params?: UploadFileParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `http://localhost:8000/pet/${petId}/uploadImage?${stringifiedParams}`
    : `http://localhost:8000/pet/${petId}/uploadImage`;
};

export const uploadFile = async (
  petId: number,
  uploadFileBody: Blob,
  params?: UploadFileParams,
  options?: RequestInit,
): Promise<uploadFileResponse> => {
  return customFetch<uploadFileResponse>(getUploadFileUrl(petId, params), {
    ...options,
    method: "POST",
    headers: {
      "Content-Type": "application/octet-stream",
      ...options?.headers,
    },
    body: JSON.stringify(uploadFileBody),
  });
};

export const getUploadFileMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof uploadFile>>,
    TError,
    { petId: number; data: Blob; params?: UploadFileParams },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof uploadFile>>,
  TError,
  { petId: number; data: Blob; params?: UploadFileParams },
  TContext
> => {
  const mutationKey = ["uploadFile"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof uploadFile>>,
    { petId: number; data: Blob; params?: UploadFileParams }
  > = (props) => {
    const { petId, data, params } = props ?? {};

    return uploadFile(petId, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UploadFileMutationResult = NonNullable<
  Awaited<ReturnType<typeof uploadFile>>
>;
export type UploadFileMutationBody = Blob;
export type UploadFileMutationError = unknown;

/**
 * @summary uploads an image
 */
export const useUploadFile = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof uploadFile>>,
      TError,
      { petId: number; data: Blob; params?: UploadFileParams },
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof uploadFile>>,
  TError,
  { petId: number; data: Blob; params?: UploadFileParams },
  TContext
> => {
  const mutationOptions = getUploadFileMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
